// Code generated by ent, DO NOT EDIT.

package room

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the room type in the database.
	Label = "room"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldNumber holds the string denoting the number field in the database.
	FieldNumber = "number"
	// FieldFloor holds the string denoting the floor field in the database.
	FieldFloor = "floor"
	// FieldNumberBeds holds the string denoting the numberbeds field in the database.
	FieldNumberBeds = "number_beds"
	// FieldNumberPatients holds the string denoting the numberpatients field in the database.
	FieldNumberPatients = "number_patients"
	// FieldTypeRoom holds the string denoting the typeroom field in the database.
	FieldTypeRoom = "type_room"
	// EdgeContains holds the string denoting the contains edge name in mutations.
	EdgeContains = "contains"
	// Table holds the table name of the room in the database.
	Table = "rooms"
	// ContainsTable is the table that holds the contains relation/edge.
	ContainsTable = "patients"
	// ContainsInverseTable is the table name for the Patient entity.
	// It exists in this package in order to avoid circular dependency with the "patient" package.
	ContainsInverseTable = "patients"
	// ContainsColumn is the table column denoting the contains relation/edge.
	ContainsColumn = "room_number"
)

// Columns holds all SQL columns for room fields.
var Columns = []string{
	FieldID,
	FieldNumber,
	FieldFloor,
	FieldNumberBeds,
	FieldNumberPatients,
	FieldTypeRoom,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Order defines the ordering method for the Room queries.
type Order func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByNumber orders the results by the number field.
func ByNumber(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldNumber, opts...).ToFunc()
}

// ByFloor orders the results by the floor field.
func ByFloor(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldFloor, opts...).ToFunc()
}

// ByNumberBeds orders the results by the numberBeds field.
func ByNumberBeds(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldNumberBeds, opts...).ToFunc()
}

// ByNumberPatients orders the results by the numberPatients field.
func ByNumberPatients(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldNumberPatients, opts...).ToFunc()
}

// ByTypeRoom orders the results by the typeRoom field.
func ByTypeRoom(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldTypeRoom, opts...).ToFunc()
}

// ByContainsCount orders the results by contains count.
func ByContainsCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newContainsStep(), opts...)
	}
}

// ByContains orders the results by contains terms.
func ByContains(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newContainsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newContainsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ContainsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ContainsTable, ContainsColumn),
	)
}
