// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hospital/internal/modules/db/ent/disease"
	"hospital/internal/modules/db/ent/doctor"
	"hospital/internal/modules/db/ent/patient"
	"hospital/internal/modules/db/ent/room"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PatientCreate is the builder for creating a Patient entity.
type PatientCreate struct {
	config
	mutation *PatientMutation
	hooks    []Hook
}

// SetSurname sets the "surname" field.
func (pc *PatientCreate) SetSurname(s string) *PatientCreate {
	pc.mutation.SetSurname(s)
	return pc
}

// SetName sets the "name" field.
func (pc *PatientCreate) SetName(s string) *PatientCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetPatronymic sets the "patronymic" field.
func (pc *PatientCreate) SetPatronymic(s string) *PatientCreate {
	pc.mutation.SetPatronymic(s)
	return pc
}

// SetHeight sets the "height" field.
func (pc *PatientCreate) SetHeight(i int) *PatientCreate {
	pc.mutation.SetHeight(i)
	return pc
}

// SetWeight sets the "weight" field.
func (pc *PatientCreate) SetWeight(f float64) *PatientCreate {
	pc.mutation.SetWeight(f)
	return pc
}

// SetRoomNumber sets the "roomNumber" field.
func (pc *PatientCreate) SetRoomNumber(i int) *PatientCreate {
	pc.mutation.SetRoomNumber(i)
	return pc
}

// SetDegreeOfDanger sets the "degreeOfDanger" field.
func (pc *PatientCreate) SetDegreeOfDanger(i int) *PatientCreate {
	pc.mutation.SetDegreeOfDanger(i)
	return pc
}

// SetRepoID sets the "repo" edge to the Room entity by ID.
func (pc *PatientCreate) SetRepoID(id int) *PatientCreate {
	pc.mutation.SetRepoID(id)
	return pc
}

// SetRepo sets the "repo" edge to the Room entity.
func (pc *PatientCreate) SetRepo(r *Room) *PatientCreate {
	return pc.SetRepoID(r.ID)
}

// AddDoctorIDs adds the "doctor" edge to the Doctor entity by IDs.
func (pc *PatientCreate) AddDoctorIDs(ids ...int) *PatientCreate {
	pc.mutation.AddDoctorIDs(ids...)
	return pc
}

// AddDoctor adds the "doctor" edges to the Doctor entity.
func (pc *PatientCreate) AddDoctor(d ...*Doctor) *PatientCreate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return pc.AddDoctorIDs(ids...)
}

// SetIllsID sets the "ills" edge to the Disease entity by ID.
func (pc *PatientCreate) SetIllsID(id int) *PatientCreate {
	pc.mutation.SetIllsID(id)
	return pc
}

// SetNillableIllsID sets the "ills" edge to the Disease entity by ID if the given value is not nil.
func (pc *PatientCreate) SetNillableIllsID(id *int) *PatientCreate {
	if id != nil {
		pc = pc.SetIllsID(*id)
	}
	return pc
}

// SetIlls sets the "ills" edge to the Disease entity.
func (pc *PatientCreate) SetIlls(d *Disease) *PatientCreate {
	return pc.SetIllsID(d.ID)
}

// Mutation returns the PatientMutation object of the builder.
func (pc *PatientCreate) Mutation() *PatientMutation {
	return pc.mutation
}

// Save creates the Patient in the database.
func (pc *PatientCreate) Save(ctx context.Context) (*Patient, error) {
	return withHooks[*Patient, PatientMutation](ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PatientCreate) SaveX(ctx context.Context) *Patient {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PatientCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PatientCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PatientCreate) check() error {
	if _, ok := pc.mutation.Surname(); !ok {
		return &ValidationError{Name: "surname", err: errors.New(`ent: missing required field "Patient.surname"`)}
	}
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Patient.name"`)}
	}
	if _, ok := pc.mutation.Patronymic(); !ok {
		return &ValidationError{Name: "patronymic", err: errors.New(`ent: missing required field "Patient.patronymic"`)}
	}
	if _, ok := pc.mutation.Height(); !ok {
		return &ValidationError{Name: "height", err: errors.New(`ent: missing required field "Patient.height"`)}
	}
	if _, ok := pc.mutation.Weight(); !ok {
		return &ValidationError{Name: "weight", err: errors.New(`ent: missing required field "Patient.weight"`)}
	}
	if _, ok := pc.mutation.RoomNumber(); !ok {
		return &ValidationError{Name: "roomNumber", err: errors.New(`ent: missing required field "Patient.roomNumber"`)}
	}
	if _, ok := pc.mutation.DegreeOfDanger(); !ok {
		return &ValidationError{Name: "degreeOfDanger", err: errors.New(`ent: missing required field "Patient.degreeOfDanger"`)}
	}
	if _, ok := pc.mutation.RepoID(); !ok {
		return &ValidationError{Name: "repo", err: errors.New(`ent: missing required edge "Patient.repo"`)}
	}
	return nil
}

func (pc *PatientCreate) sqlSave(ctx context.Context) (*Patient, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PatientCreate) createSpec() (*Patient, *sqlgraph.CreateSpec) {
	var (
		_node = &Patient{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(patient.Table, sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt))
	)
	if value, ok := pc.mutation.Surname(); ok {
		_spec.SetField(patient.FieldSurname, field.TypeString, value)
		_node.Surname = value
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.SetField(patient.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pc.mutation.Patronymic(); ok {
		_spec.SetField(patient.FieldPatronymic, field.TypeString, value)
		_node.Patronymic = value
	}
	if value, ok := pc.mutation.Height(); ok {
		_spec.SetField(patient.FieldHeight, field.TypeInt, value)
		_node.Height = value
	}
	if value, ok := pc.mutation.Weight(); ok {
		_spec.SetField(patient.FieldWeight, field.TypeFloat64, value)
		_node.Weight = value
	}
	if value, ok := pc.mutation.DegreeOfDanger(); ok {
		_spec.SetField(patient.FieldDegreeOfDanger, field.TypeInt, value)
		_node.DegreeOfDanger = value
	}
	if nodes := pc.mutation.RepoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patient.RepoTable,
			Columns: []string{patient.RepoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RoomNumber = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.DoctorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   patient.DoctorTable,
			Columns: patient.DoctorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(doctor.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.IllsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patient.IllsTable,
			Columns: []string{patient.IllsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(disease.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.disease_has = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PatientCreateBulk is the builder for creating many Patient entities in bulk.
type PatientCreateBulk struct {
	config
	builders []*PatientCreate
}

// Save creates the Patient entities in the database.
func (pcb *PatientCreateBulk) Save(ctx context.Context) ([]*Patient, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Patient, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PatientMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PatientCreateBulk) SaveX(ctx context.Context) []*Patient {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PatientCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PatientCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
