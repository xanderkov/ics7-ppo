// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hospital/internal/modules/db/ent/disease"
	"hospital/internal/modules/db/ent/doctor"
	"hospital/internal/modules/db/ent/patient"
	"hospital/internal/modules/db/ent/predicate"
	"hospital/internal/modules/db/ent/room"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PatientUpdate is the builder for updating Patient entities.
type PatientUpdate struct {
	config
	hooks    []Hook
	mutation *PatientMutation
}

// Where appends a list predicates to the PatientUpdate builder.
func (pu *PatientUpdate) Where(ps ...predicate.Patient) *PatientUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetSurname sets the "surname" field.
func (pu *PatientUpdate) SetSurname(s string) *PatientUpdate {
	pu.mutation.SetSurname(s)
	return pu
}

// SetName sets the "name" field.
func (pu *PatientUpdate) SetName(s string) *PatientUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetPatronymic sets the "patronymic" field.
func (pu *PatientUpdate) SetPatronymic(s string) *PatientUpdate {
	pu.mutation.SetPatronymic(s)
	return pu
}

// SetHeight sets the "height" field.
func (pu *PatientUpdate) SetHeight(i int) *PatientUpdate {
	pu.mutation.ResetHeight()
	pu.mutation.SetHeight(i)
	return pu
}

// AddHeight adds i to the "height" field.
func (pu *PatientUpdate) AddHeight(i int) *PatientUpdate {
	pu.mutation.AddHeight(i)
	return pu
}

// SetWeight sets the "weight" field.
func (pu *PatientUpdate) SetWeight(f float64) *PatientUpdate {
	pu.mutation.ResetWeight()
	pu.mutation.SetWeight(f)
	return pu
}

// AddWeight adds f to the "weight" field.
func (pu *PatientUpdate) AddWeight(f float64) *PatientUpdate {
	pu.mutation.AddWeight(f)
	return pu
}

// SetRoomNumber sets the "roomNumber" field.
func (pu *PatientUpdate) SetRoomNumber(i int) *PatientUpdate {
	pu.mutation.SetRoomNumber(i)
	return pu
}

// SetDegreeOfDanger sets the "degreeOfDanger" field.
func (pu *PatientUpdate) SetDegreeOfDanger(i int) *PatientUpdate {
	pu.mutation.ResetDegreeOfDanger()
	pu.mutation.SetDegreeOfDanger(i)
	return pu
}

// AddDegreeOfDanger adds i to the "degreeOfDanger" field.
func (pu *PatientUpdate) AddDegreeOfDanger(i int) *PatientUpdate {
	pu.mutation.AddDegreeOfDanger(i)
	return pu
}

// SetRepoID sets the "repo" edge to the Room entity by ID.
func (pu *PatientUpdate) SetRepoID(id int) *PatientUpdate {
	pu.mutation.SetRepoID(id)
	return pu
}

// SetRepo sets the "repo" edge to the Room entity.
func (pu *PatientUpdate) SetRepo(r *Room) *PatientUpdate {
	return pu.SetRepoID(r.ID)
}

// AddDoctorIDs adds the "doctor" edge to the Doctor entity by IDs.
func (pu *PatientUpdate) AddDoctorIDs(ids ...int) *PatientUpdate {
	pu.mutation.AddDoctorIDs(ids...)
	return pu
}

// AddDoctor adds the "doctor" edges to the Doctor entity.
func (pu *PatientUpdate) AddDoctor(d ...*Doctor) *PatientUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return pu.AddDoctorIDs(ids...)
}

// SetIllsID sets the "ills" edge to the Disease entity by ID.
func (pu *PatientUpdate) SetIllsID(id int) *PatientUpdate {
	pu.mutation.SetIllsID(id)
	return pu
}

// SetNillableIllsID sets the "ills" edge to the Disease entity by ID if the given value is not nil.
func (pu *PatientUpdate) SetNillableIllsID(id *int) *PatientUpdate {
	if id != nil {
		pu = pu.SetIllsID(*id)
	}
	return pu
}

// SetIlls sets the "ills" edge to the Disease entity.
func (pu *PatientUpdate) SetIlls(d *Disease) *PatientUpdate {
	return pu.SetIllsID(d.ID)
}

// Mutation returns the PatientMutation object of the builder.
func (pu *PatientUpdate) Mutation() *PatientMutation {
	return pu.mutation
}

// ClearRepo clears the "repo" edge to the Room entity.
func (pu *PatientUpdate) ClearRepo() *PatientUpdate {
	pu.mutation.ClearRepo()
	return pu
}

// ClearDoctor clears all "doctor" edges to the Doctor entity.
func (pu *PatientUpdate) ClearDoctor() *PatientUpdate {
	pu.mutation.ClearDoctor()
	return pu
}

// RemoveDoctorIDs removes the "doctor" edge to Doctor entities by IDs.
func (pu *PatientUpdate) RemoveDoctorIDs(ids ...int) *PatientUpdate {
	pu.mutation.RemoveDoctorIDs(ids...)
	return pu
}

// RemoveDoctor removes "doctor" edges to Doctor entities.
func (pu *PatientUpdate) RemoveDoctor(d ...*Doctor) *PatientUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return pu.RemoveDoctorIDs(ids...)
}

// ClearIlls clears the "ills" edge to the Disease entity.
func (pu *PatientUpdate) ClearIlls() *PatientUpdate {
	pu.mutation.ClearIlls()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PatientUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, PatientMutation](ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PatientUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PatientUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PatientUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PatientUpdate) check() error {
	if _, ok := pu.mutation.RepoID(); pu.mutation.RepoCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Patient.repo"`)
	}
	return nil
}

func (pu *PatientUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(patient.Table, patient.Columns, sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Surname(); ok {
		_spec.SetField(patient.FieldSurname, field.TypeString, value)
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(patient.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.Patronymic(); ok {
		_spec.SetField(patient.FieldPatronymic, field.TypeString, value)
	}
	if value, ok := pu.mutation.Height(); ok {
		_spec.SetField(patient.FieldHeight, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedHeight(); ok {
		_spec.AddField(patient.FieldHeight, field.TypeInt, value)
	}
	if value, ok := pu.mutation.Weight(); ok {
		_spec.SetField(patient.FieldWeight, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedWeight(); ok {
		_spec.AddField(patient.FieldWeight, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.DegreeOfDanger(); ok {
		_spec.SetField(patient.FieldDegreeOfDanger, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedDegreeOfDanger(); ok {
		_spec.AddField(patient.FieldDegreeOfDanger, field.TypeInt, value)
	}
	if pu.mutation.RepoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patient.RepoTable,
			Columns: []string{patient.RepoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RepoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patient.RepoTable,
			Columns: []string{patient.RepoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.DoctorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   patient.DoctorTable,
			Columns: patient.DoctorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(doctor.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedDoctorIDs(); len(nodes) > 0 && !pu.mutation.DoctorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   patient.DoctorTable,
			Columns: patient.DoctorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(doctor.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.DoctorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   patient.DoctorTable,
			Columns: patient.DoctorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(doctor.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.IllsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patient.IllsTable,
			Columns: []string{patient.IllsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(disease.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.IllsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patient.IllsTable,
			Columns: []string{patient.IllsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(disease.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{patient.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PatientUpdateOne is the builder for updating a single Patient entity.
type PatientUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PatientMutation
}

// SetSurname sets the "surname" field.
func (puo *PatientUpdateOne) SetSurname(s string) *PatientUpdateOne {
	puo.mutation.SetSurname(s)
	return puo
}

// SetName sets the "name" field.
func (puo *PatientUpdateOne) SetName(s string) *PatientUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetPatronymic sets the "patronymic" field.
func (puo *PatientUpdateOne) SetPatronymic(s string) *PatientUpdateOne {
	puo.mutation.SetPatronymic(s)
	return puo
}

// SetHeight sets the "height" field.
func (puo *PatientUpdateOne) SetHeight(i int) *PatientUpdateOne {
	puo.mutation.ResetHeight()
	puo.mutation.SetHeight(i)
	return puo
}

// AddHeight adds i to the "height" field.
func (puo *PatientUpdateOne) AddHeight(i int) *PatientUpdateOne {
	puo.mutation.AddHeight(i)
	return puo
}

// SetWeight sets the "weight" field.
func (puo *PatientUpdateOne) SetWeight(f float64) *PatientUpdateOne {
	puo.mutation.ResetWeight()
	puo.mutation.SetWeight(f)
	return puo
}

// AddWeight adds f to the "weight" field.
func (puo *PatientUpdateOne) AddWeight(f float64) *PatientUpdateOne {
	puo.mutation.AddWeight(f)
	return puo
}

// SetRoomNumber sets the "roomNumber" field.
func (puo *PatientUpdateOne) SetRoomNumber(i int) *PatientUpdateOne {
	puo.mutation.SetRoomNumber(i)
	return puo
}

// SetDegreeOfDanger sets the "degreeOfDanger" field.
func (puo *PatientUpdateOne) SetDegreeOfDanger(i int) *PatientUpdateOne {
	puo.mutation.ResetDegreeOfDanger()
	puo.mutation.SetDegreeOfDanger(i)
	return puo
}

// AddDegreeOfDanger adds i to the "degreeOfDanger" field.
func (puo *PatientUpdateOne) AddDegreeOfDanger(i int) *PatientUpdateOne {
	puo.mutation.AddDegreeOfDanger(i)
	return puo
}

// SetRepoID sets the "repo" edge to the Room entity by ID.
func (puo *PatientUpdateOne) SetRepoID(id int) *PatientUpdateOne {
	puo.mutation.SetRepoID(id)
	return puo
}

// SetRepo sets the "repo" edge to the Room entity.
func (puo *PatientUpdateOne) SetRepo(r *Room) *PatientUpdateOne {
	return puo.SetRepoID(r.ID)
}

// AddDoctorIDs adds the "doctor" edge to the Doctor entity by IDs.
func (puo *PatientUpdateOne) AddDoctorIDs(ids ...int) *PatientUpdateOne {
	puo.mutation.AddDoctorIDs(ids...)
	return puo
}

// AddDoctor adds the "doctor" edges to the Doctor entity.
func (puo *PatientUpdateOne) AddDoctor(d ...*Doctor) *PatientUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return puo.AddDoctorIDs(ids...)
}

// SetIllsID sets the "ills" edge to the Disease entity by ID.
func (puo *PatientUpdateOne) SetIllsID(id int) *PatientUpdateOne {
	puo.mutation.SetIllsID(id)
	return puo
}

// SetNillableIllsID sets the "ills" edge to the Disease entity by ID if the given value is not nil.
func (puo *PatientUpdateOne) SetNillableIllsID(id *int) *PatientUpdateOne {
	if id != nil {
		puo = puo.SetIllsID(*id)
	}
	return puo
}

// SetIlls sets the "ills" edge to the Disease entity.
func (puo *PatientUpdateOne) SetIlls(d *Disease) *PatientUpdateOne {
	return puo.SetIllsID(d.ID)
}

// Mutation returns the PatientMutation object of the builder.
func (puo *PatientUpdateOne) Mutation() *PatientMutation {
	return puo.mutation
}

// ClearRepo clears the "repo" edge to the Room entity.
func (puo *PatientUpdateOne) ClearRepo() *PatientUpdateOne {
	puo.mutation.ClearRepo()
	return puo
}

// ClearDoctor clears all "doctor" edges to the Doctor entity.
func (puo *PatientUpdateOne) ClearDoctor() *PatientUpdateOne {
	puo.mutation.ClearDoctor()
	return puo
}

// RemoveDoctorIDs removes the "doctor" edge to Doctor entities by IDs.
func (puo *PatientUpdateOne) RemoveDoctorIDs(ids ...int) *PatientUpdateOne {
	puo.mutation.RemoveDoctorIDs(ids...)
	return puo
}

// RemoveDoctor removes "doctor" edges to Doctor entities.
func (puo *PatientUpdateOne) RemoveDoctor(d ...*Doctor) *PatientUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return puo.RemoveDoctorIDs(ids...)
}

// ClearIlls clears the "ills" edge to the Disease entity.
func (puo *PatientUpdateOne) ClearIlls() *PatientUpdateOne {
	puo.mutation.ClearIlls()
	return puo
}

// Where appends a list predicates to the PatientUpdate builder.
func (puo *PatientUpdateOne) Where(ps ...predicate.Patient) *PatientUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PatientUpdateOne) Select(field string, fields ...string) *PatientUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Patient entity.
func (puo *PatientUpdateOne) Save(ctx context.Context) (*Patient, error) {
	return withHooks[*Patient, PatientMutation](ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PatientUpdateOne) SaveX(ctx context.Context) *Patient {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PatientUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PatientUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PatientUpdateOne) check() error {
	if _, ok := puo.mutation.RepoID(); puo.mutation.RepoCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Patient.repo"`)
	}
	return nil
}

func (puo *PatientUpdateOne) sqlSave(ctx context.Context) (_node *Patient, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(patient.Table, patient.Columns, sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Patient.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, patient.FieldID)
		for _, f := range fields {
			if !patient.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != patient.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Surname(); ok {
		_spec.SetField(patient.FieldSurname, field.TypeString, value)
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(patient.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.Patronymic(); ok {
		_spec.SetField(patient.FieldPatronymic, field.TypeString, value)
	}
	if value, ok := puo.mutation.Height(); ok {
		_spec.SetField(patient.FieldHeight, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedHeight(); ok {
		_spec.AddField(patient.FieldHeight, field.TypeInt, value)
	}
	if value, ok := puo.mutation.Weight(); ok {
		_spec.SetField(patient.FieldWeight, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedWeight(); ok {
		_spec.AddField(patient.FieldWeight, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.DegreeOfDanger(); ok {
		_spec.SetField(patient.FieldDegreeOfDanger, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedDegreeOfDanger(); ok {
		_spec.AddField(patient.FieldDegreeOfDanger, field.TypeInt, value)
	}
	if puo.mutation.RepoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patient.RepoTable,
			Columns: []string{patient.RepoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RepoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patient.RepoTable,
			Columns: []string{patient.RepoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.DoctorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   patient.DoctorTable,
			Columns: patient.DoctorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(doctor.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedDoctorIDs(); len(nodes) > 0 && !puo.mutation.DoctorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   patient.DoctorTable,
			Columns: patient.DoctorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(doctor.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.DoctorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   patient.DoctorTable,
			Columns: patient.DoctorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(doctor.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.IllsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patient.IllsTable,
			Columns: []string{patient.IllsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(disease.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.IllsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patient.IllsTable,
			Columns: []string{patient.IllsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(disease.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Patient{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{patient.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
