// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hospital/internal/modules/db/ent/disease"
	"hospital/internal/modules/db/ent/patient"
	"hospital/internal/modules/db/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DiseaseUpdate is the builder for updating Disease entities.
type DiseaseUpdate struct {
	config
	hooks    []Hook
	mutation *DiseaseMutation
}

// Where appends a list predicates to the DiseaseUpdate builder.
func (du *DiseaseUpdate) Where(ps ...predicate.Disease) *DiseaseUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetThreat sets the "threat" field.
func (du *DiseaseUpdate) SetThreat(s string) *DiseaseUpdate {
	du.mutation.SetThreat(s)
	return du
}

// SetName sets the "name" field.
func (du *DiseaseUpdate) SetName(s string) *DiseaseUpdate {
	du.mutation.SetName(s)
	return du
}

// SetDegreeOfDanger sets the "degreeOfDanger" field.
func (du *DiseaseUpdate) SetDegreeOfDanger(i int) *DiseaseUpdate {
	du.mutation.ResetDegreeOfDanger()
	du.mutation.SetDegreeOfDanger(i)
	return du
}

// AddDegreeOfDanger adds i to the "degreeOfDanger" field.
func (du *DiseaseUpdate) AddDegreeOfDanger(i int) *DiseaseUpdate {
	du.mutation.AddDegreeOfDanger(i)
	return du
}

// AddHaIDs adds the "has" edge to the Patient entity by IDs.
func (du *DiseaseUpdate) AddHaIDs(ids ...int) *DiseaseUpdate {
	du.mutation.AddHaIDs(ids...)
	return du
}

// AddHas adds the "has" edges to the Patient entity.
func (du *DiseaseUpdate) AddHas(p ...*Patient) *DiseaseUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return du.AddHaIDs(ids...)
}

// Mutation returns the DiseaseMutation object of the builder.
func (du *DiseaseUpdate) Mutation() *DiseaseMutation {
	return du.mutation
}

// ClearHas clears all "has" edges to the Patient entity.
func (du *DiseaseUpdate) ClearHas() *DiseaseUpdate {
	du.mutation.ClearHas()
	return du
}

// RemoveHaIDs removes the "has" edge to Patient entities by IDs.
func (du *DiseaseUpdate) RemoveHaIDs(ids ...int) *DiseaseUpdate {
	du.mutation.RemoveHaIDs(ids...)
	return du
}

// RemoveHas removes "has" edges to Patient entities.
func (du *DiseaseUpdate) RemoveHas(p ...*Patient) *DiseaseUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return du.RemoveHaIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DiseaseUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, DiseaseMutation](ctx, du.sqlSave, du.mutation, du.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DiseaseUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DiseaseUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DiseaseUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

func (du *DiseaseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(disease.Table, disease.Columns, sqlgraph.NewFieldSpec(disease.FieldID, field.TypeInt))
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.Threat(); ok {
		_spec.SetField(disease.FieldThreat, field.TypeString, value)
	}
	if value, ok := du.mutation.Name(); ok {
		_spec.SetField(disease.FieldName, field.TypeString, value)
	}
	if value, ok := du.mutation.DegreeOfDanger(); ok {
		_spec.SetField(disease.FieldDegreeOfDanger, field.TypeInt, value)
	}
	if value, ok := du.mutation.AddedDegreeOfDanger(); ok {
		_spec.AddField(disease.FieldDegreeOfDanger, field.TypeInt, value)
	}
	if du.mutation.HasCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   disease.HasTable,
			Columns: []string{disease.HasColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedHasIDs(); len(nodes) > 0 && !du.mutation.HasCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   disease.HasTable,
			Columns: []string{disease.HasColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.HasIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   disease.HasTable,
			Columns: []string{disease.HasColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{disease.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	du.mutation.done = true
	return n, nil
}

// DiseaseUpdateOne is the builder for updating a single Disease entity.
type DiseaseUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DiseaseMutation
}

// SetThreat sets the "threat" field.
func (duo *DiseaseUpdateOne) SetThreat(s string) *DiseaseUpdateOne {
	duo.mutation.SetThreat(s)
	return duo
}

// SetName sets the "name" field.
func (duo *DiseaseUpdateOne) SetName(s string) *DiseaseUpdateOne {
	duo.mutation.SetName(s)
	return duo
}

// SetDegreeOfDanger sets the "degreeOfDanger" field.
func (duo *DiseaseUpdateOne) SetDegreeOfDanger(i int) *DiseaseUpdateOne {
	duo.mutation.ResetDegreeOfDanger()
	duo.mutation.SetDegreeOfDanger(i)
	return duo
}

// AddDegreeOfDanger adds i to the "degreeOfDanger" field.
func (duo *DiseaseUpdateOne) AddDegreeOfDanger(i int) *DiseaseUpdateOne {
	duo.mutation.AddDegreeOfDanger(i)
	return duo
}

// AddHaIDs adds the "has" edge to the Patient entity by IDs.
func (duo *DiseaseUpdateOne) AddHaIDs(ids ...int) *DiseaseUpdateOne {
	duo.mutation.AddHaIDs(ids...)
	return duo
}

// AddHas adds the "has" edges to the Patient entity.
func (duo *DiseaseUpdateOne) AddHas(p ...*Patient) *DiseaseUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return duo.AddHaIDs(ids...)
}

// Mutation returns the DiseaseMutation object of the builder.
func (duo *DiseaseUpdateOne) Mutation() *DiseaseMutation {
	return duo.mutation
}

// ClearHas clears all "has" edges to the Patient entity.
func (duo *DiseaseUpdateOne) ClearHas() *DiseaseUpdateOne {
	duo.mutation.ClearHas()
	return duo
}

// RemoveHaIDs removes the "has" edge to Patient entities by IDs.
func (duo *DiseaseUpdateOne) RemoveHaIDs(ids ...int) *DiseaseUpdateOne {
	duo.mutation.RemoveHaIDs(ids...)
	return duo
}

// RemoveHas removes "has" edges to Patient entities.
func (duo *DiseaseUpdateOne) RemoveHas(p ...*Patient) *DiseaseUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return duo.RemoveHaIDs(ids...)
}

// Where appends a list predicates to the DiseaseUpdate builder.
func (duo *DiseaseUpdateOne) Where(ps ...predicate.Disease) *DiseaseUpdateOne {
	duo.mutation.Where(ps...)
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DiseaseUpdateOne) Select(field string, fields ...string) *DiseaseUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Disease entity.
func (duo *DiseaseUpdateOne) Save(ctx context.Context) (*Disease, error) {
	return withHooks[*Disease, DiseaseMutation](ctx, duo.sqlSave, duo.mutation, duo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DiseaseUpdateOne) SaveX(ctx context.Context) *Disease {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DiseaseUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DiseaseUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (duo *DiseaseUpdateOne) sqlSave(ctx context.Context) (_node *Disease, err error) {
	_spec := sqlgraph.NewUpdateSpec(disease.Table, disease.Columns, sqlgraph.NewFieldSpec(disease.FieldID, field.TypeInt))
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Disease.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, disease.FieldID)
		for _, f := range fields {
			if !disease.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != disease.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.Threat(); ok {
		_spec.SetField(disease.FieldThreat, field.TypeString, value)
	}
	if value, ok := duo.mutation.Name(); ok {
		_spec.SetField(disease.FieldName, field.TypeString, value)
	}
	if value, ok := duo.mutation.DegreeOfDanger(); ok {
		_spec.SetField(disease.FieldDegreeOfDanger, field.TypeInt, value)
	}
	if value, ok := duo.mutation.AddedDegreeOfDanger(); ok {
		_spec.AddField(disease.FieldDegreeOfDanger, field.TypeInt, value)
	}
	if duo.mutation.HasCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   disease.HasTable,
			Columns: []string{disease.HasColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedHasIDs(); len(nodes) > 0 && !duo.mutation.HasCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   disease.HasTable,
			Columns: []string{disease.HasColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.HasIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   disease.HasTable,
			Columns: []string{disease.HasColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Disease{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{disease.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duo.mutation.done = true
	return _node, nil
}
