// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"hospital/internal/modules/db/ent/disease"
	"hospital/internal/modules/db/ent/patient"
	"hospital/internal/modules/db/ent/room"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Patient is the model entity for the Patient schema.
type Patient struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Surname holds the value of the "surname" field.
	Surname string `json:"surname,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Patronymic holds the value of the "patronymic" field.
	Patronymic string `json:"patronymic,omitempty"`
	// Height holds the value of the "height" field.
	Height int `json:"height,omitempty"`
	// Weight holds the value of the "weight" field.
	Weight float64 `json:"weight,omitempty"`
	// RoomNumber holds the value of the "roomNumber" field.
	RoomNumber int `json:"roomNumber,omitempty"`
	// DegreeOfDanger holds the value of the "degreeOfDanger" field.
	DegreeOfDanger int `json:"degreeOfDanger,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PatientQuery when eager-loading is set.
	Edges        PatientEdges `json:"edges"`
	disease_has  *int
	selectValues sql.SelectValues
}

// PatientEdges holds the relations/edges for other nodes in the graph.
type PatientEdges struct {
	// Repo holds the value of the repo edge.
	Repo *Room `json:"repo,omitempty"`
	// Doctor holds the value of the doctor edge.
	Doctor []*Doctor `json:"doctor,omitempty"`
	// Ills holds the value of the ills edge.
	Ills *Disease `json:"ills,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// RepoOrErr returns the Repo value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PatientEdges) RepoOrErr() (*Room, error) {
	if e.loadedTypes[0] {
		if e.Repo == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: room.Label}
		}
		return e.Repo, nil
	}
	return nil, &NotLoadedError{edge: "repo"}
}

// DoctorOrErr returns the Doctor value or an error if the edge
// was not loaded in eager-loading.
func (e PatientEdges) DoctorOrErr() ([]*Doctor, error) {
	if e.loadedTypes[1] {
		return e.Doctor, nil
	}
	return nil, &NotLoadedError{edge: "doctor"}
}

// IllsOrErr returns the Ills value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PatientEdges) IllsOrErr() (*Disease, error) {
	if e.loadedTypes[2] {
		if e.Ills == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: disease.Label}
		}
		return e.Ills, nil
	}
	return nil, &NotLoadedError{edge: "ills"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Patient) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case patient.FieldWeight:
			values[i] = new(sql.NullFloat64)
		case patient.FieldID, patient.FieldHeight, patient.FieldRoomNumber, patient.FieldDegreeOfDanger:
			values[i] = new(sql.NullInt64)
		case patient.FieldSurname, patient.FieldName, patient.FieldPatronymic:
			values[i] = new(sql.NullString)
		case patient.ForeignKeys[0]: // disease_has
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Patient fields.
func (pa *Patient) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case patient.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pa.ID = int(value.Int64)
		case patient.FieldSurname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field surname", values[i])
			} else if value.Valid {
				pa.Surname = value.String
			}
		case patient.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pa.Name = value.String
			}
		case patient.FieldPatronymic:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field patronymic", values[i])
			} else if value.Valid {
				pa.Patronymic = value.String
			}
		case patient.FieldHeight:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field height", values[i])
			} else if value.Valid {
				pa.Height = int(value.Int64)
			}
		case patient.FieldWeight:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field weight", values[i])
			} else if value.Valid {
				pa.Weight = value.Float64
			}
		case patient.FieldRoomNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field roomNumber", values[i])
			} else if value.Valid {
				pa.RoomNumber = int(value.Int64)
			}
		case patient.FieldDegreeOfDanger:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field degreeOfDanger", values[i])
			} else if value.Valid {
				pa.DegreeOfDanger = int(value.Int64)
			}
		case patient.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field disease_has", value)
			} else if value.Valid {
				pa.disease_has = new(int)
				*pa.disease_has = int(value.Int64)
			}
		default:
			pa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Patient.
// This includes values selected through modifiers, order, etc.
func (pa *Patient) Value(name string) (ent.Value, error) {
	return pa.selectValues.Get(name)
}

// QueryRepo queries the "repo" edge of the Patient entity.
func (pa *Patient) QueryRepo() *RoomQuery {
	return NewPatientClient(pa.config).QueryRepo(pa)
}

// QueryDoctor queries the "doctor" edge of the Patient entity.
func (pa *Patient) QueryDoctor() *DoctorQuery {
	return NewPatientClient(pa.config).QueryDoctor(pa)
}

// QueryIlls queries the "ills" edge of the Patient entity.
func (pa *Patient) QueryIlls() *DiseaseQuery {
	return NewPatientClient(pa.config).QueryIlls(pa)
}

// Update returns a builder for updating this Patient.
// Note that you need to call Patient.Unwrap() before calling this method if this Patient
// was returned from a transaction, and the transaction was committed or rolled back.
func (pa *Patient) Update() *PatientUpdateOne {
	return NewPatientClient(pa.config).UpdateOne(pa)
}

// Unwrap unwraps the Patient entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pa *Patient) Unwrap() *Patient {
	_tx, ok := pa.config.driver.(*txDriver)
	if !ok {
		panic("ent: Patient is not a transactional entity")
	}
	pa.config.driver = _tx.drv
	return pa
}

// String implements the fmt.Stringer.
func (pa *Patient) String() string {
	var builder strings.Builder
	builder.WriteString("Patient(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pa.ID))
	builder.WriteString("surname=")
	builder.WriteString(pa.Surname)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(pa.Name)
	builder.WriteString(", ")
	builder.WriteString("patronymic=")
	builder.WriteString(pa.Patronymic)
	builder.WriteString(", ")
	builder.WriteString("height=")
	builder.WriteString(fmt.Sprintf("%v", pa.Height))
	builder.WriteString(", ")
	builder.WriteString("weight=")
	builder.WriteString(fmt.Sprintf("%v", pa.Weight))
	builder.WriteString(", ")
	builder.WriteString("roomNumber=")
	builder.WriteString(fmt.Sprintf("%v", pa.RoomNumber))
	builder.WriteString(", ")
	builder.WriteString("degreeOfDanger=")
	builder.WriteString(fmt.Sprintf("%v", pa.DegreeOfDanger))
	builder.WriteByte(')')
	return builder.String()
}

// Patients is a parsable slice of Patient.
type Patients []*Patient
