// Code generated by ent, DO NOT EDIT.

package patient

import (
	"hospital/internal/modules/db/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Patient {
	return predicate.Patient(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Patient {
	return predicate.Patient(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Patient {
	return predicate.Patient(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Patient {
	return predicate.Patient(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Patient {
	return predicate.Patient(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Patient {
	return predicate.Patient(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Patient {
	return predicate.Patient(sql.FieldLTE(FieldID, id))
}

// Surname applies equality check predicate on the "surname" field. It's identical to SurnameEQ.
func Surname(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldSurname, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldName, v))
}

// Patronymic applies equality check predicate on the "patronymic" field. It's identical to PatronymicEQ.
func Patronymic(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldPatronymic, v))
}

// Height applies equality check predicate on the "height" field. It's identical to HeightEQ.
func Height(v int) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldHeight, v))
}

// Weight applies equality check predicate on the "weight" field. It's identical to WeightEQ.
func Weight(v float64) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldWeight, v))
}

// RoomNumber applies equality check predicate on the "roomNumber" field. It's identical to RoomNumberEQ.
func RoomNumber(v int) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldRoomNumber, v))
}

// DegreeOfDanger applies equality check predicate on the "degreeOfDanger" field. It's identical to DegreeOfDangerEQ.
func DegreeOfDanger(v int) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldDegreeOfDanger, v))
}

// SurnameEQ applies the EQ predicate on the "surname" field.
func SurnameEQ(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldSurname, v))
}

// SurnameNEQ applies the NEQ predicate on the "surname" field.
func SurnameNEQ(v string) predicate.Patient {
	return predicate.Patient(sql.FieldNEQ(FieldSurname, v))
}

// SurnameIn applies the In predicate on the "surname" field.
func SurnameIn(vs ...string) predicate.Patient {
	return predicate.Patient(sql.FieldIn(FieldSurname, vs...))
}

// SurnameNotIn applies the NotIn predicate on the "surname" field.
func SurnameNotIn(vs ...string) predicate.Patient {
	return predicate.Patient(sql.FieldNotIn(FieldSurname, vs...))
}

// SurnameGT applies the GT predicate on the "surname" field.
func SurnameGT(v string) predicate.Patient {
	return predicate.Patient(sql.FieldGT(FieldSurname, v))
}

// SurnameGTE applies the GTE predicate on the "surname" field.
func SurnameGTE(v string) predicate.Patient {
	return predicate.Patient(sql.FieldGTE(FieldSurname, v))
}

// SurnameLT applies the LT predicate on the "surname" field.
func SurnameLT(v string) predicate.Patient {
	return predicate.Patient(sql.FieldLT(FieldSurname, v))
}

// SurnameLTE applies the LTE predicate on the "surname" field.
func SurnameLTE(v string) predicate.Patient {
	return predicate.Patient(sql.FieldLTE(FieldSurname, v))
}

// SurnameContains applies the Contains predicate on the "surname" field.
func SurnameContains(v string) predicate.Patient {
	return predicate.Patient(sql.FieldContains(FieldSurname, v))
}

// SurnameHasPrefix applies the HasPrefix predicate on the "surname" field.
func SurnameHasPrefix(v string) predicate.Patient {
	return predicate.Patient(sql.FieldHasPrefix(FieldSurname, v))
}

// SurnameHasSuffix applies the HasSuffix predicate on the "surname" field.
func SurnameHasSuffix(v string) predicate.Patient {
	return predicate.Patient(sql.FieldHasSuffix(FieldSurname, v))
}

// SurnameEqualFold applies the EqualFold predicate on the "surname" field.
func SurnameEqualFold(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEqualFold(FieldSurname, v))
}

// SurnameContainsFold applies the ContainsFold predicate on the "surname" field.
func SurnameContainsFold(v string) predicate.Patient {
	return predicate.Patient(sql.FieldContainsFold(FieldSurname, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Patient {
	return predicate.Patient(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Patient {
	return predicate.Patient(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Patient {
	return predicate.Patient(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Patient {
	return predicate.Patient(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Patient {
	return predicate.Patient(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Patient {
	return predicate.Patient(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Patient {
	return predicate.Patient(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Patient {
	return predicate.Patient(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Patient {
	return predicate.Patient(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Patient {
	return predicate.Patient(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Patient {
	return predicate.Patient(sql.FieldContainsFold(FieldName, v))
}

// PatronymicEQ applies the EQ predicate on the "patronymic" field.
func PatronymicEQ(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldPatronymic, v))
}

// PatronymicNEQ applies the NEQ predicate on the "patronymic" field.
func PatronymicNEQ(v string) predicate.Patient {
	return predicate.Patient(sql.FieldNEQ(FieldPatronymic, v))
}

// PatronymicIn applies the In predicate on the "patronymic" field.
func PatronymicIn(vs ...string) predicate.Patient {
	return predicate.Patient(sql.FieldIn(FieldPatronymic, vs...))
}

// PatronymicNotIn applies the NotIn predicate on the "patronymic" field.
func PatronymicNotIn(vs ...string) predicate.Patient {
	return predicate.Patient(sql.FieldNotIn(FieldPatronymic, vs...))
}

// PatronymicGT applies the GT predicate on the "patronymic" field.
func PatronymicGT(v string) predicate.Patient {
	return predicate.Patient(sql.FieldGT(FieldPatronymic, v))
}

// PatronymicGTE applies the GTE predicate on the "patronymic" field.
func PatronymicGTE(v string) predicate.Patient {
	return predicate.Patient(sql.FieldGTE(FieldPatronymic, v))
}

// PatronymicLT applies the LT predicate on the "patronymic" field.
func PatronymicLT(v string) predicate.Patient {
	return predicate.Patient(sql.FieldLT(FieldPatronymic, v))
}

// PatronymicLTE applies the LTE predicate on the "patronymic" field.
func PatronymicLTE(v string) predicate.Patient {
	return predicate.Patient(sql.FieldLTE(FieldPatronymic, v))
}

// PatronymicContains applies the Contains predicate on the "patronymic" field.
func PatronymicContains(v string) predicate.Patient {
	return predicate.Patient(sql.FieldContains(FieldPatronymic, v))
}

// PatronymicHasPrefix applies the HasPrefix predicate on the "patronymic" field.
func PatronymicHasPrefix(v string) predicate.Patient {
	return predicate.Patient(sql.FieldHasPrefix(FieldPatronymic, v))
}

// PatronymicHasSuffix applies the HasSuffix predicate on the "patronymic" field.
func PatronymicHasSuffix(v string) predicate.Patient {
	return predicate.Patient(sql.FieldHasSuffix(FieldPatronymic, v))
}

// PatronymicEqualFold applies the EqualFold predicate on the "patronymic" field.
func PatronymicEqualFold(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEqualFold(FieldPatronymic, v))
}

// PatronymicContainsFold applies the ContainsFold predicate on the "patronymic" field.
func PatronymicContainsFold(v string) predicate.Patient {
	return predicate.Patient(sql.FieldContainsFold(FieldPatronymic, v))
}

// HeightEQ applies the EQ predicate on the "height" field.
func HeightEQ(v int) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldHeight, v))
}

// HeightNEQ applies the NEQ predicate on the "height" field.
func HeightNEQ(v int) predicate.Patient {
	return predicate.Patient(sql.FieldNEQ(FieldHeight, v))
}

// HeightIn applies the In predicate on the "height" field.
func HeightIn(vs ...int) predicate.Patient {
	return predicate.Patient(sql.FieldIn(FieldHeight, vs...))
}

// HeightNotIn applies the NotIn predicate on the "height" field.
func HeightNotIn(vs ...int) predicate.Patient {
	return predicate.Patient(sql.FieldNotIn(FieldHeight, vs...))
}

// HeightGT applies the GT predicate on the "height" field.
func HeightGT(v int) predicate.Patient {
	return predicate.Patient(sql.FieldGT(FieldHeight, v))
}

// HeightGTE applies the GTE predicate on the "height" field.
func HeightGTE(v int) predicate.Patient {
	return predicate.Patient(sql.FieldGTE(FieldHeight, v))
}

// HeightLT applies the LT predicate on the "height" field.
func HeightLT(v int) predicate.Patient {
	return predicate.Patient(sql.FieldLT(FieldHeight, v))
}

// HeightLTE applies the LTE predicate on the "height" field.
func HeightLTE(v int) predicate.Patient {
	return predicate.Patient(sql.FieldLTE(FieldHeight, v))
}

// WeightEQ applies the EQ predicate on the "weight" field.
func WeightEQ(v float64) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldWeight, v))
}

// WeightNEQ applies the NEQ predicate on the "weight" field.
func WeightNEQ(v float64) predicate.Patient {
	return predicate.Patient(sql.FieldNEQ(FieldWeight, v))
}

// WeightIn applies the In predicate on the "weight" field.
func WeightIn(vs ...float64) predicate.Patient {
	return predicate.Patient(sql.FieldIn(FieldWeight, vs...))
}

// WeightNotIn applies the NotIn predicate on the "weight" field.
func WeightNotIn(vs ...float64) predicate.Patient {
	return predicate.Patient(sql.FieldNotIn(FieldWeight, vs...))
}

// WeightGT applies the GT predicate on the "weight" field.
func WeightGT(v float64) predicate.Patient {
	return predicate.Patient(sql.FieldGT(FieldWeight, v))
}

// WeightGTE applies the GTE predicate on the "weight" field.
func WeightGTE(v float64) predicate.Patient {
	return predicate.Patient(sql.FieldGTE(FieldWeight, v))
}

// WeightLT applies the LT predicate on the "weight" field.
func WeightLT(v float64) predicate.Patient {
	return predicate.Patient(sql.FieldLT(FieldWeight, v))
}

// WeightLTE applies the LTE predicate on the "weight" field.
func WeightLTE(v float64) predicate.Patient {
	return predicate.Patient(sql.FieldLTE(FieldWeight, v))
}

// RoomNumberEQ applies the EQ predicate on the "roomNumber" field.
func RoomNumberEQ(v int) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldRoomNumber, v))
}

// RoomNumberNEQ applies the NEQ predicate on the "roomNumber" field.
func RoomNumberNEQ(v int) predicate.Patient {
	return predicate.Patient(sql.FieldNEQ(FieldRoomNumber, v))
}

// RoomNumberIn applies the In predicate on the "roomNumber" field.
func RoomNumberIn(vs ...int) predicate.Patient {
	return predicate.Patient(sql.FieldIn(FieldRoomNumber, vs...))
}

// RoomNumberNotIn applies the NotIn predicate on the "roomNumber" field.
func RoomNumberNotIn(vs ...int) predicate.Patient {
	return predicate.Patient(sql.FieldNotIn(FieldRoomNumber, vs...))
}

// DegreeOfDangerEQ applies the EQ predicate on the "degreeOfDanger" field.
func DegreeOfDangerEQ(v int) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldDegreeOfDanger, v))
}

// DegreeOfDangerNEQ applies the NEQ predicate on the "degreeOfDanger" field.
func DegreeOfDangerNEQ(v int) predicate.Patient {
	return predicate.Patient(sql.FieldNEQ(FieldDegreeOfDanger, v))
}

// DegreeOfDangerIn applies the In predicate on the "degreeOfDanger" field.
func DegreeOfDangerIn(vs ...int) predicate.Patient {
	return predicate.Patient(sql.FieldIn(FieldDegreeOfDanger, vs...))
}

// DegreeOfDangerNotIn applies the NotIn predicate on the "degreeOfDanger" field.
func DegreeOfDangerNotIn(vs ...int) predicate.Patient {
	return predicate.Patient(sql.FieldNotIn(FieldDegreeOfDanger, vs...))
}

// DegreeOfDangerGT applies the GT predicate on the "degreeOfDanger" field.
func DegreeOfDangerGT(v int) predicate.Patient {
	return predicate.Patient(sql.FieldGT(FieldDegreeOfDanger, v))
}

// DegreeOfDangerGTE applies the GTE predicate on the "degreeOfDanger" field.
func DegreeOfDangerGTE(v int) predicate.Patient {
	return predicate.Patient(sql.FieldGTE(FieldDegreeOfDanger, v))
}

// DegreeOfDangerLT applies the LT predicate on the "degreeOfDanger" field.
func DegreeOfDangerLT(v int) predicate.Patient {
	return predicate.Patient(sql.FieldLT(FieldDegreeOfDanger, v))
}

// DegreeOfDangerLTE applies the LTE predicate on the "degreeOfDanger" field.
func DegreeOfDangerLTE(v int) predicate.Patient {
	return predicate.Patient(sql.FieldLTE(FieldDegreeOfDanger, v))
}

// HasRepo applies the HasEdge predicate on the "repo" edge.
func HasRepo() predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RepoTable, RepoColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRepoWith applies the HasEdge predicate on the "repo" edge with a given conditions (other predicates).
func HasRepoWith(preds ...predicate.Room) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		step := newRepoStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDoctor applies the HasEdge predicate on the "doctor" edge.
func HasDoctor() predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, DoctorTable, DoctorPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDoctorWith applies the HasEdge predicate on the "doctor" edge with a given conditions (other predicates).
func HasDoctorWith(preds ...predicate.Doctor) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		step := newDoctorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasIlls applies the HasEdge predicate on the "ills" edge.
func HasIlls() predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, IllsTable, IllsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasIllsWith applies the HasEdge predicate on the "ills" edge with a given conditions (other predicates).
func HasIllsWith(preds ...predicate.Disease) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		step := newIllsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Patient) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Patient) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Patient) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		p(s.Not())
	})
}
