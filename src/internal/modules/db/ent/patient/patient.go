// Code generated by ent, DO NOT EDIT.

package patient

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the patient type in the database.
	Label = "patient"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// EdgeDoctor holds the string denoting the doctor edge name in mutations.
	EdgeDoctor = "doctor"
	// Table holds the table name of the patient in the database.
	Table = "patients"
	// DoctorTable is the table that holds the doctor relation/edge. The primary key declared below.
	DoctorTable = "doctor_patient"
	// DoctorInverseTable is the table name for the Doctor entity.
	// It exists in this package in order to avoid circular dependency with the "doctor" package.
	DoctorInverseTable = "doctors"
)

// Columns holds all SQL columns for patient fields.
var Columns = []string{
	FieldID,
}

var (
	// DoctorPrimaryKey and DoctorColumn2 are the table columns denoting the
	// primary key for the doctor relation (M2M).
	DoctorPrimaryKey = []string{"doctor_id", "patient_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Order defines the ordering method for the Patient queries.
type Order func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDoctorCount orders the results by doctor count.
func ByDoctorCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDoctorStep(), opts...)
	}
}

// ByDoctor orders the results by doctor terms.
func ByDoctor(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDoctorStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newDoctorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DoctorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, DoctorTable, DoctorPrimaryKey...),
	)
}
