// Code generated by ent, DO NOT EDIT.

package patient

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the patient type in the database.
	Label = "patient"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSurname holds the string denoting the surname field in the database.
	FieldSurname = "surname"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldPatronymic holds the string denoting the patronymic field in the database.
	FieldPatronymic = "patronymic"
	// FieldHeight holds the string denoting the height field in the database.
	FieldHeight = "height"
	// FieldWeight holds the string denoting the weight field in the database.
	FieldWeight = "weight"
	// FieldRoomNumber holds the string denoting the roomnumber field in the database.
	FieldRoomNumber = "room_number"
	// FieldDegreeOfDanger holds the string denoting the degreeofdanger field in the database.
	FieldDegreeOfDanger = "degree_of_danger"
	// EdgeRepo holds the string denoting the repo edge name in mutations.
	EdgeRepo = "repo"
	// EdgeDoctor holds the string denoting the doctor edge name in mutations.
	EdgeDoctor = "doctor"
	// EdgeIlls holds the string denoting the ills edge name in mutations.
	EdgeIlls = "ills"
	// Table holds the table name of the patient in the database.
	Table = "patients"
	// RepoTable is the table that holds the repo relation/edge.
	RepoTable = "patients"
	// RepoInverseTable is the table name for the Room entity.
	// It exists in this package in order to avoid circular dependency with the "room" package.
	RepoInverseTable = "rooms"
	// RepoColumn is the table column denoting the repo relation/edge.
	RepoColumn = "room_number"
	// DoctorTable is the table that holds the doctor relation/edge. The primary key declared below.
	DoctorTable = "doctor_patient"
	// DoctorInverseTable is the table name for the Doctor entity.
	// It exists in this package in order to avoid circular dependency with the "doctor" package.
	DoctorInverseTable = "doctors"
	// IllsTable is the table that holds the ills relation/edge.
	IllsTable = "patients"
	// IllsInverseTable is the table name for the Disease entity.
	// It exists in this package in order to avoid circular dependency with the "disease" package.
	IllsInverseTable = "diseases"
	// IllsColumn is the table column denoting the ills relation/edge.
	IllsColumn = "disease_has"
)

// Columns holds all SQL columns for patient fields.
var Columns = []string{
	FieldID,
	FieldSurname,
	FieldName,
	FieldPatronymic,
	FieldHeight,
	FieldWeight,
	FieldRoomNumber,
	FieldDegreeOfDanger,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "patients"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"disease_has",
}

var (
	// DoctorPrimaryKey and DoctorColumn2 are the table columns denoting the
	// primary key for the doctor relation (M2M).
	DoctorPrimaryKey = []string{"doctor_id", "patient_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Order defines the ordering method for the Patient queries.
type Order func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySurname orders the results by the surname field.
func BySurname(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldSurname, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByPatronymic orders the results by the patronymic field.
func ByPatronymic(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldPatronymic, opts...).ToFunc()
}

// ByHeight orders the results by the height field.
func ByHeight(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldHeight, opts...).ToFunc()
}

// ByWeight orders the results by the weight field.
func ByWeight(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldWeight, opts...).ToFunc()
}

// ByRoomNumber orders the results by the roomNumber field.
func ByRoomNumber(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldRoomNumber, opts...).ToFunc()
}

// ByDegreeOfDanger orders the results by the degreeOfDanger field.
func ByDegreeOfDanger(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldDegreeOfDanger, opts...).ToFunc()
}

// ByRepoField orders the results by repo field.
func ByRepoField(field string, opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRepoStep(), sql.OrderByField(field, opts...))
	}
}

// ByDoctorCount orders the results by doctor count.
func ByDoctorCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDoctorStep(), opts...)
	}
}

// ByDoctor orders the results by doctor terms.
func ByDoctor(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDoctorStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByIllsField orders the results by ills field.
func ByIllsField(field string, opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIllsStep(), sql.OrderByField(field, opts...))
	}
}
func newRepoStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RepoInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, RepoTable, RepoColumn),
	)
}
func newDoctorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DoctorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, DoctorTable, DoctorPrimaryKey...),
	)
}
func newIllsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IllsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, IllsTable, IllsColumn),
	)
}
