// Code generated by ent, DO NOT EDIT.

package disease

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the disease type in the database.
	Label = "disease"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldThreat holds the string denoting the threat field in the database.
	FieldThreat = "threat"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDegreeOfDanger holds the string denoting the degreeofdanger field in the database.
	FieldDegreeOfDanger = "degree_of_danger"
	// EdgeHas holds the string denoting the has edge name in mutations.
	EdgeHas = "has"
	// Table holds the table name of the disease in the database.
	Table = "diseases"
	// HasTable is the table that holds the has relation/edge.
	HasTable = "patients"
	// HasInverseTable is the table name for the Patient entity.
	// It exists in this package in order to avoid circular dependency with the "patient" package.
	HasInverseTable = "patients"
	// HasColumn is the table column denoting the has relation/edge.
	HasColumn = "disease_has"
)

// Columns holds all SQL columns for disease fields.
var Columns = []string{
	FieldID,
	FieldThreat,
	FieldName,
	FieldDegreeOfDanger,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Order defines the ordering method for the Disease queries.
type Order func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByThreat orders the results by the threat field.
func ByThreat(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldThreat, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDegreeOfDanger orders the results by the degreeOfDanger field.
func ByDegreeOfDanger(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldDegreeOfDanger, opts...).ToFunc()
}

// ByHasCount orders the results by has count.
func ByHasCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newHasStep(), opts...)
	}
}

// ByHas orders the results by has terms.
func ByHas(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHasStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newHasStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HasInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, HasTable, HasColumn),
	)
}
