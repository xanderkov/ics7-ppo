// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hospital/internal/modules/db/ent/patient"
	"hospital/internal/modules/db/ent/predicate"
	"hospital/internal/modules/db/ent/room"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RoomUpdate is the builder for updating Room entities.
type RoomUpdate struct {
	config
	hooks    []Hook
	mutation *RoomMutation
}

// Where appends a list predicates to the RoomUpdate builder.
func (ru *RoomUpdate) Where(ps ...predicate.Room) *RoomUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetNumber sets the "number" field.
func (ru *RoomUpdate) SetNumber(i int) *RoomUpdate {
	ru.mutation.ResetNumber()
	ru.mutation.SetNumber(i)
	return ru
}

// AddNumber adds i to the "number" field.
func (ru *RoomUpdate) AddNumber(i int) *RoomUpdate {
	ru.mutation.AddNumber(i)
	return ru
}

// SetFloor sets the "floor" field.
func (ru *RoomUpdate) SetFloor(i int) *RoomUpdate {
	ru.mutation.ResetFloor()
	ru.mutation.SetFloor(i)
	return ru
}

// AddFloor adds i to the "floor" field.
func (ru *RoomUpdate) AddFloor(i int) *RoomUpdate {
	ru.mutation.AddFloor(i)
	return ru
}

// SetNumberBeds sets the "numberBeds" field.
func (ru *RoomUpdate) SetNumberBeds(i int) *RoomUpdate {
	ru.mutation.ResetNumberBeds()
	ru.mutation.SetNumberBeds(i)
	return ru
}

// AddNumberBeds adds i to the "numberBeds" field.
func (ru *RoomUpdate) AddNumberBeds(i int) *RoomUpdate {
	ru.mutation.AddNumberBeds(i)
	return ru
}

// SetNumberPatients sets the "numberPatients" field.
func (ru *RoomUpdate) SetNumberPatients(i int) *RoomUpdate {
	ru.mutation.ResetNumberPatients()
	ru.mutation.SetNumberPatients(i)
	return ru
}

// AddNumberPatients adds i to the "numberPatients" field.
func (ru *RoomUpdate) AddNumberPatients(i int) *RoomUpdate {
	ru.mutation.AddNumberPatients(i)
	return ru
}

// SetTypeRoom sets the "typeRoom" field.
func (ru *RoomUpdate) SetTypeRoom(s string) *RoomUpdate {
	ru.mutation.SetTypeRoom(s)
	return ru
}

// AddContainIDs adds the "contains" edge to the Patient entity by IDs.
func (ru *RoomUpdate) AddContainIDs(ids ...int) *RoomUpdate {
	ru.mutation.AddContainIDs(ids...)
	return ru
}

// AddContains adds the "contains" edges to the Patient entity.
func (ru *RoomUpdate) AddContains(p ...*Patient) *RoomUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ru.AddContainIDs(ids...)
}

// Mutation returns the RoomMutation object of the builder.
func (ru *RoomUpdate) Mutation() *RoomMutation {
	return ru.mutation
}

// ClearContains clears all "contains" edges to the Patient entity.
func (ru *RoomUpdate) ClearContains() *RoomUpdate {
	ru.mutation.ClearContains()
	return ru
}

// RemoveContainIDs removes the "contains" edge to Patient entities by IDs.
func (ru *RoomUpdate) RemoveContainIDs(ids ...int) *RoomUpdate {
	ru.mutation.RemoveContainIDs(ids...)
	return ru
}

// RemoveContains removes "contains" edges to Patient entities.
func (ru *RoomUpdate) RemoveContains(p ...*Patient) *RoomUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ru.RemoveContainIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RoomUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, RoomMutation](ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RoomUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RoomUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RoomUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ru *RoomUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(room.Table, room.Columns, sqlgraph.NewFieldSpec(room.FieldID, field.TypeInt))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Number(); ok {
		_spec.SetField(room.FieldNumber, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedNumber(); ok {
		_spec.AddField(room.FieldNumber, field.TypeInt, value)
	}
	if value, ok := ru.mutation.Floor(); ok {
		_spec.SetField(room.FieldFloor, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedFloor(); ok {
		_spec.AddField(room.FieldFloor, field.TypeInt, value)
	}
	if value, ok := ru.mutation.NumberBeds(); ok {
		_spec.SetField(room.FieldNumberBeds, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedNumberBeds(); ok {
		_spec.AddField(room.FieldNumberBeds, field.TypeInt, value)
	}
	if value, ok := ru.mutation.NumberPatients(); ok {
		_spec.SetField(room.FieldNumberPatients, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedNumberPatients(); ok {
		_spec.AddField(room.FieldNumberPatients, field.TypeInt, value)
	}
	if value, ok := ru.mutation.TypeRoom(); ok {
		_spec.SetField(room.FieldTypeRoom, field.TypeString, value)
	}
	if ru.mutation.ContainsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   room.ContainsTable,
			Columns: []string{room.ContainsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedContainsIDs(); len(nodes) > 0 && !ru.mutation.ContainsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   room.ContainsTable,
			Columns: []string{room.ContainsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ContainsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   room.ContainsTable,
			Columns: []string{room.ContainsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{room.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RoomUpdateOne is the builder for updating a single Room entity.
type RoomUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RoomMutation
}

// SetNumber sets the "number" field.
func (ruo *RoomUpdateOne) SetNumber(i int) *RoomUpdateOne {
	ruo.mutation.ResetNumber()
	ruo.mutation.SetNumber(i)
	return ruo
}

// AddNumber adds i to the "number" field.
func (ruo *RoomUpdateOne) AddNumber(i int) *RoomUpdateOne {
	ruo.mutation.AddNumber(i)
	return ruo
}

// SetFloor sets the "floor" field.
func (ruo *RoomUpdateOne) SetFloor(i int) *RoomUpdateOne {
	ruo.mutation.ResetFloor()
	ruo.mutation.SetFloor(i)
	return ruo
}

// AddFloor adds i to the "floor" field.
func (ruo *RoomUpdateOne) AddFloor(i int) *RoomUpdateOne {
	ruo.mutation.AddFloor(i)
	return ruo
}

// SetNumberBeds sets the "numberBeds" field.
func (ruo *RoomUpdateOne) SetNumberBeds(i int) *RoomUpdateOne {
	ruo.mutation.ResetNumberBeds()
	ruo.mutation.SetNumberBeds(i)
	return ruo
}

// AddNumberBeds adds i to the "numberBeds" field.
func (ruo *RoomUpdateOne) AddNumberBeds(i int) *RoomUpdateOne {
	ruo.mutation.AddNumberBeds(i)
	return ruo
}

// SetNumberPatients sets the "numberPatients" field.
func (ruo *RoomUpdateOne) SetNumberPatients(i int) *RoomUpdateOne {
	ruo.mutation.ResetNumberPatients()
	ruo.mutation.SetNumberPatients(i)
	return ruo
}

// AddNumberPatients adds i to the "numberPatients" field.
func (ruo *RoomUpdateOne) AddNumberPatients(i int) *RoomUpdateOne {
	ruo.mutation.AddNumberPatients(i)
	return ruo
}

// SetTypeRoom sets the "typeRoom" field.
func (ruo *RoomUpdateOne) SetTypeRoom(s string) *RoomUpdateOne {
	ruo.mutation.SetTypeRoom(s)
	return ruo
}

// AddContainIDs adds the "contains" edge to the Patient entity by IDs.
func (ruo *RoomUpdateOne) AddContainIDs(ids ...int) *RoomUpdateOne {
	ruo.mutation.AddContainIDs(ids...)
	return ruo
}

// AddContains adds the "contains" edges to the Patient entity.
func (ruo *RoomUpdateOne) AddContains(p ...*Patient) *RoomUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ruo.AddContainIDs(ids...)
}

// Mutation returns the RoomMutation object of the builder.
func (ruo *RoomUpdateOne) Mutation() *RoomMutation {
	return ruo.mutation
}

// ClearContains clears all "contains" edges to the Patient entity.
func (ruo *RoomUpdateOne) ClearContains() *RoomUpdateOne {
	ruo.mutation.ClearContains()
	return ruo
}

// RemoveContainIDs removes the "contains" edge to Patient entities by IDs.
func (ruo *RoomUpdateOne) RemoveContainIDs(ids ...int) *RoomUpdateOne {
	ruo.mutation.RemoveContainIDs(ids...)
	return ruo
}

// RemoveContains removes "contains" edges to Patient entities.
func (ruo *RoomUpdateOne) RemoveContains(p ...*Patient) *RoomUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ruo.RemoveContainIDs(ids...)
}

// Where appends a list predicates to the RoomUpdate builder.
func (ruo *RoomUpdateOne) Where(ps ...predicate.Room) *RoomUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RoomUpdateOne) Select(field string, fields ...string) *RoomUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Room entity.
func (ruo *RoomUpdateOne) Save(ctx context.Context) (*Room, error) {
	return withHooks[*Room, RoomMutation](ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RoomUpdateOne) SaveX(ctx context.Context) *Room {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RoomUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RoomUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ruo *RoomUpdateOne) sqlSave(ctx context.Context) (_node *Room, err error) {
	_spec := sqlgraph.NewUpdateSpec(room.Table, room.Columns, sqlgraph.NewFieldSpec(room.FieldID, field.TypeInt))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Room.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, room.FieldID)
		for _, f := range fields {
			if !room.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != room.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.Number(); ok {
		_spec.SetField(room.FieldNumber, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedNumber(); ok {
		_spec.AddField(room.FieldNumber, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.Floor(); ok {
		_spec.SetField(room.FieldFloor, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedFloor(); ok {
		_spec.AddField(room.FieldFloor, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.NumberBeds(); ok {
		_spec.SetField(room.FieldNumberBeds, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedNumberBeds(); ok {
		_spec.AddField(room.FieldNumberBeds, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.NumberPatients(); ok {
		_spec.SetField(room.FieldNumberPatients, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedNumberPatients(); ok {
		_spec.AddField(room.FieldNumberPatients, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.TypeRoom(); ok {
		_spec.SetField(room.FieldTypeRoom, field.TypeString, value)
	}
	if ruo.mutation.ContainsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   room.ContainsTable,
			Columns: []string{room.ContainsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedContainsIDs(); len(nodes) > 0 && !ruo.mutation.ContainsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   room.ContainsTable,
			Columns: []string{room.ContainsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ContainsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   room.ContainsTable,
			Columns: []string{room.ContainsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Room{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{room.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
