// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hospital/internal/modules/db/ent/disease"
	"hospital/internal/modules/db/ent/doctor"
	"hospital/internal/modules/db/ent/patient"
	"hospital/internal/modules/db/ent/predicate"
	"hospital/internal/modules/db/ent/room"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeDisease = "Disease"
	TypeDoctor  = "Doctor"
	TypePatient = "Patient"
	TypeRoom    = "Room"
)

// DiseaseMutation represents an operation that mutates the Disease nodes in the graph.
type DiseaseMutation struct {
	config
	op                Op
	typ               string
	id                *int
	threat            *string
	name              *string
	degreeOfDanger    *int
	adddegreeOfDanger *int
	clearedFields     map[string]struct{}
	has               map[int]struct{}
	removedhas        map[int]struct{}
	clearedhas        bool
	done              bool
	oldValue          func(context.Context) (*Disease, error)
	predicates        []predicate.Disease
}

var _ ent.Mutation = (*DiseaseMutation)(nil)

// diseaseOption allows management of the mutation configuration using functional options.
type diseaseOption func(*DiseaseMutation)

// newDiseaseMutation creates new mutation for the Disease entity.
func newDiseaseMutation(c config, op Op, opts ...diseaseOption) *DiseaseMutation {
	m := &DiseaseMutation{
		config:        c,
		op:            op,
		typ:           TypeDisease,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDiseaseID sets the ID field of the mutation.
func withDiseaseID(id int) diseaseOption {
	return func(m *DiseaseMutation) {
		var (
			err   error
			once  sync.Once
			value *Disease
		)
		m.oldValue = func(ctx context.Context) (*Disease, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Disease.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDisease sets the old Disease of the mutation.
func withDisease(node *Disease) diseaseOption {
	return func(m *DiseaseMutation) {
		m.oldValue = func(context.Context) (*Disease, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DiseaseMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DiseaseMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DiseaseMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DiseaseMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Disease.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetThreat sets the "threat" field.
func (m *DiseaseMutation) SetThreat(s string) {
	m.threat = &s
}

// Threat returns the value of the "threat" field in the mutation.
func (m *DiseaseMutation) Threat() (r string, exists bool) {
	v := m.threat
	if v == nil {
		return
	}
	return *v, true
}

// OldThreat returns the old "threat" field's value of the Disease entity.
// If the Disease object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DiseaseMutation) OldThreat(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldThreat is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldThreat requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldThreat: %w", err)
	}
	return oldValue.Threat, nil
}

// ResetThreat resets all changes to the "threat" field.
func (m *DiseaseMutation) ResetThreat() {
	m.threat = nil
}

// SetName sets the "name" field.
func (m *DiseaseMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *DiseaseMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Disease entity.
// If the Disease object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DiseaseMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *DiseaseMutation) ResetName() {
	m.name = nil
}

// SetDegreeOfDanger sets the "degreeOfDanger" field.
func (m *DiseaseMutation) SetDegreeOfDanger(i int) {
	m.degreeOfDanger = &i
	m.adddegreeOfDanger = nil
}

// DegreeOfDanger returns the value of the "degreeOfDanger" field in the mutation.
func (m *DiseaseMutation) DegreeOfDanger() (r int, exists bool) {
	v := m.degreeOfDanger
	if v == nil {
		return
	}
	return *v, true
}

// OldDegreeOfDanger returns the old "degreeOfDanger" field's value of the Disease entity.
// If the Disease object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DiseaseMutation) OldDegreeOfDanger(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDegreeOfDanger is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDegreeOfDanger requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDegreeOfDanger: %w", err)
	}
	return oldValue.DegreeOfDanger, nil
}

// AddDegreeOfDanger adds i to the "degreeOfDanger" field.
func (m *DiseaseMutation) AddDegreeOfDanger(i int) {
	if m.adddegreeOfDanger != nil {
		*m.adddegreeOfDanger += i
	} else {
		m.adddegreeOfDanger = &i
	}
}

// AddedDegreeOfDanger returns the value that was added to the "degreeOfDanger" field in this mutation.
func (m *DiseaseMutation) AddedDegreeOfDanger() (r int, exists bool) {
	v := m.adddegreeOfDanger
	if v == nil {
		return
	}
	return *v, true
}

// ResetDegreeOfDanger resets all changes to the "degreeOfDanger" field.
func (m *DiseaseMutation) ResetDegreeOfDanger() {
	m.degreeOfDanger = nil
	m.adddegreeOfDanger = nil
}

// AddHaIDs adds the "has" edge to the Patient entity by ids.
func (m *DiseaseMutation) AddHaIDs(ids ...int) {
	if m.has == nil {
		m.has = make(map[int]struct{})
	}
	for i := range ids {
		m.has[ids[i]] = struct{}{}
	}
}

// ClearHas clears the "has" edge to the Patient entity.
func (m *DiseaseMutation) ClearHas() {
	m.clearedhas = true
}

// HasCleared reports if the "has" edge to the Patient entity was cleared.
func (m *DiseaseMutation) HasCleared() bool {
	return m.clearedhas
}

// RemoveHaIDs removes the "has" edge to the Patient entity by IDs.
func (m *DiseaseMutation) RemoveHaIDs(ids ...int) {
	if m.removedhas == nil {
		m.removedhas = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.has, ids[i])
		m.removedhas[ids[i]] = struct{}{}
	}
}

// RemovedHas returns the removed IDs of the "has" edge to the Patient entity.
func (m *DiseaseMutation) RemovedHasIDs() (ids []int) {
	for id := range m.removedhas {
		ids = append(ids, id)
	}
	return
}

// HasIDs returns the "has" edge IDs in the mutation.
func (m *DiseaseMutation) HasIDs() (ids []int) {
	for id := range m.has {
		ids = append(ids, id)
	}
	return
}

// ResetHas resets all changes to the "has" edge.
func (m *DiseaseMutation) ResetHas() {
	m.has = nil
	m.clearedhas = false
	m.removedhas = nil
}

// Where appends a list predicates to the DiseaseMutation builder.
func (m *DiseaseMutation) Where(ps ...predicate.Disease) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DiseaseMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DiseaseMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Disease, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DiseaseMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DiseaseMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Disease).
func (m *DiseaseMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DiseaseMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.threat != nil {
		fields = append(fields, disease.FieldThreat)
	}
	if m.name != nil {
		fields = append(fields, disease.FieldName)
	}
	if m.degreeOfDanger != nil {
		fields = append(fields, disease.FieldDegreeOfDanger)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DiseaseMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case disease.FieldThreat:
		return m.Threat()
	case disease.FieldName:
		return m.Name()
	case disease.FieldDegreeOfDanger:
		return m.DegreeOfDanger()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DiseaseMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case disease.FieldThreat:
		return m.OldThreat(ctx)
	case disease.FieldName:
		return m.OldName(ctx)
	case disease.FieldDegreeOfDanger:
		return m.OldDegreeOfDanger(ctx)
	}
	return nil, fmt.Errorf("unknown Disease field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DiseaseMutation) SetField(name string, value ent.Value) error {
	switch name {
	case disease.FieldThreat:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetThreat(v)
		return nil
	case disease.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case disease.FieldDegreeOfDanger:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDegreeOfDanger(v)
		return nil
	}
	return fmt.Errorf("unknown Disease field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DiseaseMutation) AddedFields() []string {
	var fields []string
	if m.adddegreeOfDanger != nil {
		fields = append(fields, disease.FieldDegreeOfDanger)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DiseaseMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case disease.FieldDegreeOfDanger:
		return m.AddedDegreeOfDanger()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DiseaseMutation) AddField(name string, value ent.Value) error {
	switch name {
	case disease.FieldDegreeOfDanger:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDegreeOfDanger(v)
		return nil
	}
	return fmt.Errorf("unknown Disease numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DiseaseMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DiseaseMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DiseaseMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Disease nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DiseaseMutation) ResetField(name string) error {
	switch name {
	case disease.FieldThreat:
		m.ResetThreat()
		return nil
	case disease.FieldName:
		m.ResetName()
		return nil
	case disease.FieldDegreeOfDanger:
		m.ResetDegreeOfDanger()
		return nil
	}
	return fmt.Errorf("unknown Disease field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DiseaseMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.has != nil {
		edges = append(edges, disease.EdgeHas)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DiseaseMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case disease.EdgeHas:
		ids := make([]ent.Value, 0, len(m.has))
		for id := range m.has {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DiseaseMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedhas != nil {
		edges = append(edges, disease.EdgeHas)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DiseaseMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case disease.EdgeHas:
		ids := make([]ent.Value, 0, len(m.removedhas))
		for id := range m.removedhas {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DiseaseMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedhas {
		edges = append(edges, disease.EdgeHas)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DiseaseMutation) EdgeCleared(name string) bool {
	switch name {
	case disease.EdgeHas:
		return m.clearedhas
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DiseaseMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Disease unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DiseaseMutation) ResetEdge(name string) error {
	switch name {
	case disease.EdgeHas:
		m.ResetHas()
		return nil
	}
	return fmt.Errorf("unknown Disease edge %s", name)
}

// DoctorMutation represents an operation that mutates the Doctor nodes in the graph.
type DoctorMutation struct {
	config
	op            Op
	typ           string
	id            *int
	tokenId       *string
	surname       *string
	speciality    *string
	role          *string
	clearedFields map[string]struct{}
	treats        map[int]struct{}
	removedtreats map[int]struct{}
	clearedtreats bool
	done          bool
	oldValue      func(context.Context) (*Doctor, error)
	predicates    []predicate.Doctor
}

var _ ent.Mutation = (*DoctorMutation)(nil)

// doctorOption allows management of the mutation configuration using functional options.
type doctorOption func(*DoctorMutation)

// newDoctorMutation creates new mutation for the Doctor entity.
func newDoctorMutation(c config, op Op, opts ...doctorOption) *DoctorMutation {
	m := &DoctorMutation{
		config:        c,
		op:            op,
		typ:           TypeDoctor,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDoctorID sets the ID field of the mutation.
func withDoctorID(id int) doctorOption {
	return func(m *DoctorMutation) {
		var (
			err   error
			once  sync.Once
			value *Doctor
		)
		m.oldValue = func(ctx context.Context) (*Doctor, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Doctor.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDoctor sets the old Doctor of the mutation.
func withDoctor(node *Doctor) doctorOption {
	return func(m *DoctorMutation) {
		m.oldValue = func(context.Context) (*Doctor, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DoctorMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DoctorMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DoctorMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DoctorMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Doctor.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTokenId sets the "tokenId" field.
func (m *DoctorMutation) SetTokenId(s string) {
	m.tokenId = &s
}

// TokenId returns the value of the "tokenId" field in the mutation.
func (m *DoctorMutation) TokenId() (r string, exists bool) {
	v := m.tokenId
	if v == nil {
		return
	}
	return *v, true
}

// OldTokenId returns the old "tokenId" field's value of the Doctor entity.
// If the Doctor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DoctorMutation) OldTokenId(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTokenId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTokenId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTokenId: %w", err)
	}
	return oldValue.TokenId, nil
}

// ResetTokenId resets all changes to the "tokenId" field.
func (m *DoctorMutation) ResetTokenId() {
	m.tokenId = nil
}

// SetSurname sets the "surname" field.
func (m *DoctorMutation) SetSurname(s string) {
	m.surname = &s
}

// Surname returns the value of the "surname" field in the mutation.
func (m *DoctorMutation) Surname() (r string, exists bool) {
	v := m.surname
	if v == nil {
		return
	}
	return *v, true
}

// OldSurname returns the old "surname" field's value of the Doctor entity.
// If the Doctor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DoctorMutation) OldSurname(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSurname is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSurname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSurname: %w", err)
	}
	return oldValue.Surname, nil
}

// ResetSurname resets all changes to the "surname" field.
func (m *DoctorMutation) ResetSurname() {
	m.surname = nil
}

// SetSpeciality sets the "speciality" field.
func (m *DoctorMutation) SetSpeciality(s string) {
	m.speciality = &s
}

// Speciality returns the value of the "speciality" field in the mutation.
func (m *DoctorMutation) Speciality() (r string, exists bool) {
	v := m.speciality
	if v == nil {
		return
	}
	return *v, true
}

// OldSpeciality returns the old "speciality" field's value of the Doctor entity.
// If the Doctor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DoctorMutation) OldSpeciality(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSpeciality is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSpeciality requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSpeciality: %w", err)
	}
	return oldValue.Speciality, nil
}

// ResetSpeciality resets all changes to the "speciality" field.
func (m *DoctorMutation) ResetSpeciality() {
	m.speciality = nil
}

// SetRole sets the "role" field.
func (m *DoctorMutation) SetRole(s string) {
	m.role = &s
}

// Role returns the value of the "role" field in the mutation.
func (m *DoctorMutation) Role() (r string, exists bool) {
	v := m.role
	if v == nil {
		return
	}
	return *v, true
}

// OldRole returns the old "role" field's value of the Doctor entity.
// If the Doctor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DoctorMutation) OldRole(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRole is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRole requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRole: %w", err)
	}
	return oldValue.Role, nil
}

// ResetRole resets all changes to the "role" field.
func (m *DoctorMutation) ResetRole() {
	m.role = nil
}

// AddTreatIDs adds the "treats" edge to the Patient entity by ids.
func (m *DoctorMutation) AddTreatIDs(ids ...int) {
	if m.treats == nil {
		m.treats = make(map[int]struct{})
	}
	for i := range ids {
		m.treats[ids[i]] = struct{}{}
	}
}

// ClearTreats clears the "treats" edge to the Patient entity.
func (m *DoctorMutation) ClearTreats() {
	m.clearedtreats = true
}

// TreatsCleared reports if the "treats" edge to the Patient entity was cleared.
func (m *DoctorMutation) TreatsCleared() bool {
	return m.clearedtreats
}

// RemoveTreatIDs removes the "treats" edge to the Patient entity by IDs.
func (m *DoctorMutation) RemoveTreatIDs(ids ...int) {
	if m.removedtreats == nil {
		m.removedtreats = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.treats, ids[i])
		m.removedtreats[ids[i]] = struct{}{}
	}
}

// RemovedTreats returns the removed IDs of the "treats" edge to the Patient entity.
func (m *DoctorMutation) RemovedTreatsIDs() (ids []int) {
	for id := range m.removedtreats {
		ids = append(ids, id)
	}
	return
}

// TreatsIDs returns the "treats" edge IDs in the mutation.
func (m *DoctorMutation) TreatsIDs() (ids []int) {
	for id := range m.treats {
		ids = append(ids, id)
	}
	return
}

// ResetTreats resets all changes to the "treats" edge.
func (m *DoctorMutation) ResetTreats() {
	m.treats = nil
	m.clearedtreats = false
	m.removedtreats = nil
}

// Where appends a list predicates to the DoctorMutation builder.
func (m *DoctorMutation) Where(ps ...predicate.Doctor) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DoctorMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DoctorMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Doctor, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DoctorMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DoctorMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Doctor).
func (m *DoctorMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DoctorMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.tokenId != nil {
		fields = append(fields, doctor.FieldTokenId)
	}
	if m.surname != nil {
		fields = append(fields, doctor.FieldSurname)
	}
	if m.speciality != nil {
		fields = append(fields, doctor.FieldSpeciality)
	}
	if m.role != nil {
		fields = append(fields, doctor.FieldRole)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DoctorMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case doctor.FieldTokenId:
		return m.TokenId()
	case doctor.FieldSurname:
		return m.Surname()
	case doctor.FieldSpeciality:
		return m.Speciality()
	case doctor.FieldRole:
		return m.Role()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DoctorMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case doctor.FieldTokenId:
		return m.OldTokenId(ctx)
	case doctor.FieldSurname:
		return m.OldSurname(ctx)
	case doctor.FieldSpeciality:
		return m.OldSpeciality(ctx)
	case doctor.FieldRole:
		return m.OldRole(ctx)
	}
	return nil, fmt.Errorf("unknown Doctor field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DoctorMutation) SetField(name string, value ent.Value) error {
	switch name {
	case doctor.FieldTokenId:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTokenId(v)
		return nil
	case doctor.FieldSurname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSurname(v)
		return nil
	case doctor.FieldSpeciality:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSpeciality(v)
		return nil
	case doctor.FieldRole:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRole(v)
		return nil
	}
	return fmt.Errorf("unknown Doctor field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DoctorMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DoctorMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DoctorMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Doctor numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DoctorMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DoctorMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DoctorMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Doctor nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DoctorMutation) ResetField(name string) error {
	switch name {
	case doctor.FieldTokenId:
		m.ResetTokenId()
		return nil
	case doctor.FieldSurname:
		m.ResetSurname()
		return nil
	case doctor.FieldSpeciality:
		m.ResetSpeciality()
		return nil
	case doctor.FieldRole:
		m.ResetRole()
		return nil
	}
	return fmt.Errorf("unknown Doctor field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DoctorMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.treats != nil {
		edges = append(edges, doctor.EdgeTreats)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DoctorMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case doctor.EdgeTreats:
		ids := make([]ent.Value, 0, len(m.treats))
		for id := range m.treats {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DoctorMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedtreats != nil {
		edges = append(edges, doctor.EdgeTreats)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DoctorMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case doctor.EdgeTreats:
		ids := make([]ent.Value, 0, len(m.removedtreats))
		for id := range m.removedtreats {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DoctorMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedtreats {
		edges = append(edges, doctor.EdgeTreats)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DoctorMutation) EdgeCleared(name string) bool {
	switch name {
	case doctor.EdgeTreats:
		return m.clearedtreats
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DoctorMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Doctor unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DoctorMutation) ResetEdge(name string) error {
	switch name {
	case doctor.EdgeTreats:
		m.ResetTreats()
		return nil
	}
	return fmt.Errorf("unknown Doctor edge %s", name)
}

// PatientMutation represents an operation that mutates the Patient nodes in the graph.
type PatientMutation struct {
	config
	op                Op
	typ               string
	id                *int
	surname           *string
	name              *string
	patronymic        *string
	height            *int
	addheight         *int
	weight            *float64
	addweight         *float64
	degreeOfDanger    *int
	adddegreeOfDanger *int
	clearedFields     map[string]struct{}
	repo              *int
	clearedrepo       bool
	doctor            map[int]struct{}
	removeddoctor     map[int]struct{}
	cleareddoctor     bool
	ills              *int
	clearedills       bool
	done              bool
	oldValue          func(context.Context) (*Patient, error)
	predicates        []predicate.Patient
}

var _ ent.Mutation = (*PatientMutation)(nil)

// patientOption allows management of the mutation configuration using functional options.
type patientOption func(*PatientMutation)

// newPatientMutation creates new mutation for the Patient entity.
func newPatientMutation(c config, op Op, opts ...patientOption) *PatientMutation {
	m := &PatientMutation{
		config:        c,
		op:            op,
		typ:           TypePatient,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPatientID sets the ID field of the mutation.
func withPatientID(id int) patientOption {
	return func(m *PatientMutation) {
		var (
			err   error
			once  sync.Once
			value *Patient
		)
		m.oldValue = func(ctx context.Context) (*Patient, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Patient.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPatient sets the old Patient of the mutation.
func withPatient(node *Patient) patientOption {
	return func(m *PatientMutation) {
		m.oldValue = func(context.Context) (*Patient, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PatientMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PatientMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PatientMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PatientMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Patient.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetSurname sets the "surname" field.
func (m *PatientMutation) SetSurname(s string) {
	m.surname = &s
}

// Surname returns the value of the "surname" field in the mutation.
func (m *PatientMutation) Surname() (r string, exists bool) {
	v := m.surname
	if v == nil {
		return
	}
	return *v, true
}

// OldSurname returns the old "surname" field's value of the Patient entity.
// If the Patient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PatientMutation) OldSurname(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSurname is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSurname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSurname: %w", err)
	}
	return oldValue.Surname, nil
}

// ResetSurname resets all changes to the "surname" field.
func (m *PatientMutation) ResetSurname() {
	m.surname = nil
}

// SetName sets the "name" field.
func (m *PatientMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *PatientMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Patient entity.
// If the Patient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PatientMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *PatientMutation) ResetName() {
	m.name = nil
}

// SetPatronymic sets the "patronymic" field.
func (m *PatientMutation) SetPatronymic(s string) {
	m.patronymic = &s
}

// Patronymic returns the value of the "patronymic" field in the mutation.
func (m *PatientMutation) Patronymic() (r string, exists bool) {
	v := m.patronymic
	if v == nil {
		return
	}
	return *v, true
}

// OldPatronymic returns the old "patronymic" field's value of the Patient entity.
// If the Patient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PatientMutation) OldPatronymic(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPatronymic is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPatronymic requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPatronymic: %w", err)
	}
	return oldValue.Patronymic, nil
}

// ResetPatronymic resets all changes to the "patronymic" field.
func (m *PatientMutation) ResetPatronymic() {
	m.patronymic = nil
}

// SetHeight sets the "height" field.
func (m *PatientMutation) SetHeight(i int) {
	m.height = &i
	m.addheight = nil
}

// Height returns the value of the "height" field in the mutation.
func (m *PatientMutation) Height() (r int, exists bool) {
	v := m.height
	if v == nil {
		return
	}
	return *v, true
}

// OldHeight returns the old "height" field's value of the Patient entity.
// If the Patient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PatientMutation) OldHeight(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHeight is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHeight requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHeight: %w", err)
	}
	return oldValue.Height, nil
}

// AddHeight adds i to the "height" field.
func (m *PatientMutation) AddHeight(i int) {
	if m.addheight != nil {
		*m.addheight += i
	} else {
		m.addheight = &i
	}
}

// AddedHeight returns the value that was added to the "height" field in this mutation.
func (m *PatientMutation) AddedHeight() (r int, exists bool) {
	v := m.addheight
	if v == nil {
		return
	}
	return *v, true
}

// ResetHeight resets all changes to the "height" field.
func (m *PatientMutation) ResetHeight() {
	m.height = nil
	m.addheight = nil
}

// SetWeight sets the "weight" field.
func (m *PatientMutation) SetWeight(f float64) {
	m.weight = &f
	m.addweight = nil
}

// Weight returns the value of the "weight" field in the mutation.
func (m *PatientMutation) Weight() (r float64, exists bool) {
	v := m.weight
	if v == nil {
		return
	}
	return *v, true
}

// OldWeight returns the old "weight" field's value of the Patient entity.
// If the Patient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PatientMutation) OldWeight(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWeight is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWeight requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWeight: %w", err)
	}
	return oldValue.Weight, nil
}

// AddWeight adds f to the "weight" field.
func (m *PatientMutation) AddWeight(f float64) {
	if m.addweight != nil {
		*m.addweight += f
	} else {
		m.addweight = &f
	}
}

// AddedWeight returns the value that was added to the "weight" field in this mutation.
func (m *PatientMutation) AddedWeight() (r float64, exists bool) {
	v := m.addweight
	if v == nil {
		return
	}
	return *v, true
}

// ResetWeight resets all changes to the "weight" field.
func (m *PatientMutation) ResetWeight() {
	m.weight = nil
	m.addweight = nil
}

// SetRoomNumber sets the "roomNumber" field.
func (m *PatientMutation) SetRoomNumber(i int) {
	m.repo = &i
}

// RoomNumber returns the value of the "roomNumber" field in the mutation.
func (m *PatientMutation) RoomNumber() (r int, exists bool) {
	v := m.repo
	if v == nil {
		return
	}
	return *v, true
}

// OldRoomNumber returns the old "roomNumber" field's value of the Patient entity.
// If the Patient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PatientMutation) OldRoomNumber(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRoomNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRoomNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRoomNumber: %w", err)
	}
	return oldValue.RoomNumber, nil
}

// ResetRoomNumber resets all changes to the "roomNumber" field.
func (m *PatientMutation) ResetRoomNumber() {
	m.repo = nil
}

// SetDegreeOfDanger sets the "degreeOfDanger" field.
func (m *PatientMutation) SetDegreeOfDanger(i int) {
	m.degreeOfDanger = &i
	m.adddegreeOfDanger = nil
}

// DegreeOfDanger returns the value of the "degreeOfDanger" field in the mutation.
func (m *PatientMutation) DegreeOfDanger() (r int, exists bool) {
	v := m.degreeOfDanger
	if v == nil {
		return
	}
	return *v, true
}

// OldDegreeOfDanger returns the old "degreeOfDanger" field's value of the Patient entity.
// If the Patient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PatientMutation) OldDegreeOfDanger(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDegreeOfDanger is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDegreeOfDanger requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDegreeOfDanger: %w", err)
	}
	return oldValue.DegreeOfDanger, nil
}

// AddDegreeOfDanger adds i to the "degreeOfDanger" field.
func (m *PatientMutation) AddDegreeOfDanger(i int) {
	if m.adddegreeOfDanger != nil {
		*m.adddegreeOfDanger += i
	} else {
		m.adddegreeOfDanger = &i
	}
}

// AddedDegreeOfDanger returns the value that was added to the "degreeOfDanger" field in this mutation.
func (m *PatientMutation) AddedDegreeOfDanger() (r int, exists bool) {
	v := m.adddegreeOfDanger
	if v == nil {
		return
	}
	return *v, true
}

// ResetDegreeOfDanger resets all changes to the "degreeOfDanger" field.
func (m *PatientMutation) ResetDegreeOfDanger() {
	m.degreeOfDanger = nil
	m.adddegreeOfDanger = nil
}

// SetRepoID sets the "repo" edge to the Room entity by id.
func (m *PatientMutation) SetRepoID(id int) {
	m.repo = &id
}

// ClearRepo clears the "repo" edge to the Room entity.
func (m *PatientMutation) ClearRepo() {
	m.clearedrepo = true
}

// RepoCleared reports if the "repo" edge to the Room entity was cleared.
func (m *PatientMutation) RepoCleared() bool {
	return m.clearedrepo
}

// RepoID returns the "repo" edge ID in the mutation.
func (m *PatientMutation) RepoID() (id int, exists bool) {
	if m.repo != nil {
		return *m.repo, true
	}
	return
}

// RepoIDs returns the "repo" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RepoID instead. It exists only for internal usage by the builders.
func (m *PatientMutation) RepoIDs() (ids []int) {
	if id := m.repo; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRepo resets all changes to the "repo" edge.
func (m *PatientMutation) ResetRepo() {
	m.repo = nil
	m.clearedrepo = false
}

// AddDoctorIDs adds the "doctor" edge to the Doctor entity by ids.
func (m *PatientMutation) AddDoctorIDs(ids ...int) {
	if m.doctor == nil {
		m.doctor = make(map[int]struct{})
	}
	for i := range ids {
		m.doctor[ids[i]] = struct{}{}
	}
}

// ClearDoctor clears the "doctor" edge to the Doctor entity.
func (m *PatientMutation) ClearDoctor() {
	m.cleareddoctor = true
}

// DoctorCleared reports if the "doctor" edge to the Doctor entity was cleared.
func (m *PatientMutation) DoctorCleared() bool {
	return m.cleareddoctor
}

// RemoveDoctorIDs removes the "doctor" edge to the Doctor entity by IDs.
func (m *PatientMutation) RemoveDoctorIDs(ids ...int) {
	if m.removeddoctor == nil {
		m.removeddoctor = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.doctor, ids[i])
		m.removeddoctor[ids[i]] = struct{}{}
	}
}

// RemovedDoctor returns the removed IDs of the "doctor" edge to the Doctor entity.
func (m *PatientMutation) RemovedDoctorIDs() (ids []int) {
	for id := range m.removeddoctor {
		ids = append(ids, id)
	}
	return
}

// DoctorIDs returns the "doctor" edge IDs in the mutation.
func (m *PatientMutation) DoctorIDs() (ids []int) {
	for id := range m.doctor {
		ids = append(ids, id)
	}
	return
}

// ResetDoctor resets all changes to the "doctor" edge.
func (m *PatientMutation) ResetDoctor() {
	m.doctor = nil
	m.cleareddoctor = false
	m.removeddoctor = nil
}

// SetIllsID sets the "ills" edge to the Disease entity by id.
func (m *PatientMutation) SetIllsID(id int) {
	m.ills = &id
}

// ClearIlls clears the "ills" edge to the Disease entity.
func (m *PatientMutation) ClearIlls() {
	m.clearedills = true
}

// IllsCleared reports if the "ills" edge to the Disease entity was cleared.
func (m *PatientMutation) IllsCleared() bool {
	return m.clearedills
}

// IllsID returns the "ills" edge ID in the mutation.
func (m *PatientMutation) IllsID() (id int, exists bool) {
	if m.ills != nil {
		return *m.ills, true
	}
	return
}

// IllsIDs returns the "ills" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// IllsID instead. It exists only for internal usage by the builders.
func (m *PatientMutation) IllsIDs() (ids []int) {
	if id := m.ills; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetIlls resets all changes to the "ills" edge.
func (m *PatientMutation) ResetIlls() {
	m.ills = nil
	m.clearedills = false
}

// Where appends a list predicates to the PatientMutation builder.
func (m *PatientMutation) Where(ps ...predicate.Patient) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PatientMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PatientMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Patient, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PatientMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PatientMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Patient).
func (m *PatientMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PatientMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.surname != nil {
		fields = append(fields, patient.FieldSurname)
	}
	if m.name != nil {
		fields = append(fields, patient.FieldName)
	}
	if m.patronymic != nil {
		fields = append(fields, patient.FieldPatronymic)
	}
	if m.height != nil {
		fields = append(fields, patient.FieldHeight)
	}
	if m.weight != nil {
		fields = append(fields, patient.FieldWeight)
	}
	if m.repo != nil {
		fields = append(fields, patient.FieldRoomNumber)
	}
	if m.degreeOfDanger != nil {
		fields = append(fields, patient.FieldDegreeOfDanger)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PatientMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case patient.FieldSurname:
		return m.Surname()
	case patient.FieldName:
		return m.Name()
	case patient.FieldPatronymic:
		return m.Patronymic()
	case patient.FieldHeight:
		return m.Height()
	case patient.FieldWeight:
		return m.Weight()
	case patient.FieldRoomNumber:
		return m.RoomNumber()
	case patient.FieldDegreeOfDanger:
		return m.DegreeOfDanger()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PatientMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case patient.FieldSurname:
		return m.OldSurname(ctx)
	case patient.FieldName:
		return m.OldName(ctx)
	case patient.FieldPatronymic:
		return m.OldPatronymic(ctx)
	case patient.FieldHeight:
		return m.OldHeight(ctx)
	case patient.FieldWeight:
		return m.OldWeight(ctx)
	case patient.FieldRoomNumber:
		return m.OldRoomNumber(ctx)
	case patient.FieldDegreeOfDanger:
		return m.OldDegreeOfDanger(ctx)
	}
	return nil, fmt.Errorf("unknown Patient field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PatientMutation) SetField(name string, value ent.Value) error {
	switch name {
	case patient.FieldSurname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSurname(v)
		return nil
	case patient.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case patient.FieldPatronymic:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPatronymic(v)
		return nil
	case patient.FieldHeight:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHeight(v)
		return nil
	case patient.FieldWeight:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWeight(v)
		return nil
	case patient.FieldRoomNumber:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRoomNumber(v)
		return nil
	case patient.FieldDegreeOfDanger:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDegreeOfDanger(v)
		return nil
	}
	return fmt.Errorf("unknown Patient field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PatientMutation) AddedFields() []string {
	var fields []string
	if m.addheight != nil {
		fields = append(fields, patient.FieldHeight)
	}
	if m.addweight != nil {
		fields = append(fields, patient.FieldWeight)
	}
	if m.adddegreeOfDanger != nil {
		fields = append(fields, patient.FieldDegreeOfDanger)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PatientMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case patient.FieldHeight:
		return m.AddedHeight()
	case patient.FieldWeight:
		return m.AddedWeight()
	case patient.FieldDegreeOfDanger:
		return m.AddedDegreeOfDanger()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PatientMutation) AddField(name string, value ent.Value) error {
	switch name {
	case patient.FieldHeight:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddHeight(v)
		return nil
	case patient.FieldWeight:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddWeight(v)
		return nil
	case patient.FieldDegreeOfDanger:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDegreeOfDanger(v)
		return nil
	}
	return fmt.Errorf("unknown Patient numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PatientMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PatientMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PatientMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Patient nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PatientMutation) ResetField(name string) error {
	switch name {
	case patient.FieldSurname:
		m.ResetSurname()
		return nil
	case patient.FieldName:
		m.ResetName()
		return nil
	case patient.FieldPatronymic:
		m.ResetPatronymic()
		return nil
	case patient.FieldHeight:
		m.ResetHeight()
		return nil
	case patient.FieldWeight:
		m.ResetWeight()
		return nil
	case patient.FieldRoomNumber:
		m.ResetRoomNumber()
		return nil
	case patient.FieldDegreeOfDanger:
		m.ResetDegreeOfDanger()
		return nil
	}
	return fmt.Errorf("unknown Patient field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PatientMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.repo != nil {
		edges = append(edges, patient.EdgeRepo)
	}
	if m.doctor != nil {
		edges = append(edges, patient.EdgeDoctor)
	}
	if m.ills != nil {
		edges = append(edges, patient.EdgeIlls)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PatientMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case patient.EdgeRepo:
		if id := m.repo; id != nil {
			return []ent.Value{*id}
		}
	case patient.EdgeDoctor:
		ids := make([]ent.Value, 0, len(m.doctor))
		for id := range m.doctor {
			ids = append(ids, id)
		}
		return ids
	case patient.EdgeIlls:
		if id := m.ills; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PatientMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removeddoctor != nil {
		edges = append(edges, patient.EdgeDoctor)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PatientMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case patient.EdgeDoctor:
		ids := make([]ent.Value, 0, len(m.removeddoctor))
		for id := range m.removeddoctor {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PatientMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedrepo {
		edges = append(edges, patient.EdgeRepo)
	}
	if m.cleareddoctor {
		edges = append(edges, patient.EdgeDoctor)
	}
	if m.clearedills {
		edges = append(edges, patient.EdgeIlls)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PatientMutation) EdgeCleared(name string) bool {
	switch name {
	case patient.EdgeRepo:
		return m.clearedrepo
	case patient.EdgeDoctor:
		return m.cleareddoctor
	case patient.EdgeIlls:
		return m.clearedills
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PatientMutation) ClearEdge(name string) error {
	switch name {
	case patient.EdgeRepo:
		m.ClearRepo()
		return nil
	case patient.EdgeIlls:
		m.ClearIlls()
		return nil
	}
	return fmt.Errorf("unknown Patient unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PatientMutation) ResetEdge(name string) error {
	switch name {
	case patient.EdgeRepo:
		m.ResetRepo()
		return nil
	case patient.EdgeDoctor:
		m.ResetDoctor()
		return nil
	case patient.EdgeIlls:
		m.ResetIlls()
		return nil
	}
	return fmt.Errorf("unknown Patient edge %s", name)
}

// RoomMutation represents an operation that mutates the Room nodes in the graph.
type RoomMutation struct {
	config
	op                Op
	typ               string
	id                *int
	number            *int
	addnumber         *int
	floor             *int
	addfloor          *int
	numberBeds        *int
	addnumberBeds     *int
	numberPatients    *int
	addnumberPatients *int
	typeRoom          *string
	clearedFields     map[string]struct{}
	contains          map[int]struct{}
	removedcontains   map[int]struct{}
	clearedcontains   bool
	done              bool
	oldValue          func(context.Context) (*Room, error)
	predicates        []predicate.Room
}

var _ ent.Mutation = (*RoomMutation)(nil)

// roomOption allows management of the mutation configuration using functional options.
type roomOption func(*RoomMutation)

// newRoomMutation creates new mutation for the Room entity.
func newRoomMutation(c config, op Op, opts ...roomOption) *RoomMutation {
	m := &RoomMutation{
		config:        c,
		op:            op,
		typ:           TypeRoom,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRoomID sets the ID field of the mutation.
func withRoomID(id int) roomOption {
	return func(m *RoomMutation) {
		var (
			err   error
			once  sync.Once
			value *Room
		)
		m.oldValue = func(ctx context.Context) (*Room, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Room.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRoom sets the old Room of the mutation.
func withRoom(node *Room) roomOption {
	return func(m *RoomMutation) {
		m.oldValue = func(context.Context) (*Room, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RoomMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RoomMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RoomMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RoomMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Room.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetNumber sets the "number" field.
func (m *RoomMutation) SetNumber(i int) {
	m.number = &i
	m.addnumber = nil
}

// Number returns the value of the "number" field in the mutation.
func (m *RoomMutation) Number() (r int, exists bool) {
	v := m.number
	if v == nil {
		return
	}
	return *v, true
}

// OldNumber returns the old "number" field's value of the Room entity.
// If the Room object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoomMutation) OldNumber(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNumber: %w", err)
	}
	return oldValue.Number, nil
}

// AddNumber adds i to the "number" field.
func (m *RoomMutation) AddNumber(i int) {
	if m.addnumber != nil {
		*m.addnumber += i
	} else {
		m.addnumber = &i
	}
}

// AddedNumber returns the value that was added to the "number" field in this mutation.
func (m *RoomMutation) AddedNumber() (r int, exists bool) {
	v := m.addnumber
	if v == nil {
		return
	}
	return *v, true
}

// ResetNumber resets all changes to the "number" field.
func (m *RoomMutation) ResetNumber() {
	m.number = nil
	m.addnumber = nil
}

// SetFloor sets the "floor" field.
func (m *RoomMutation) SetFloor(i int) {
	m.floor = &i
	m.addfloor = nil
}

// Floor returns the value of the "floor" field in the mutation.
func (m *RoomMutation) Floor() (r int, exists bool) {
	v := m.floor
	if v == nil {
		return
	}
	return *v, true
}

// OldFloor returns the old "floor" field's value of the Room entity.
// If the Room object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoomMutation) OldFloor(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFloor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFloor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFloor: %w", err)
	}
	return oldValue.Floor, nil
}

// AddFloor adds i to the "floor" field.
func (m *RoomMutation) AddFloor(i int) {
	if m.addfloor != nil {
		*m.addfloor += i
	} else {
		m.addfloor = &i
	}
}

// AddedFloor returns the value that was added to the "floor" field in this mutation.
func (m *RoomMutation) AddedFloor() (r int, exists bool) {
	v := m.addfloor
	if v == nil {
		return
	}
	return *v, true
}

// ResetFloor resets all changes to the "floor" field.
func (m *RoomMutation) ResetFloor() {
	m.floor = nil
	m.addfloor = nil
}

// SetNumberBeds sets the "numberBeds" field.
func (m *RoomMutation) SetNumberBeds(i int) {
	m.numberBeds = &i
	m.addnumberBeds = nil
}

// NumberBeds returns the value of the "numberBeds" field in the mutation.
func (m *RoomMutation) NumberBeds() (r int, exists bool) {
	v := m.numberBeds
	if v == nil {
		return
	}
	return *v, true
}

// OldNumberBeds returns the old "numberBeds" field's value of the Room entity.
// If the Room object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoomMutation) OldNumberBeds(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNumberBeds is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNumberBeds requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNumberBeds: %w", err)
	}
	return oldValue.NumberBeds, nil
}

// AddNumberBeds adds i to the "numberBeds" field.
func (m *RoomMutation) AddNumberBeds(i int) {
	if m.addnumberBeds != nil {
		*m.addnumberBeds += i
	} else {
		m.addnumberBeds = &i
	}
}

// AddedNumberBeds returns the value that was added to the "numberBeds" field in this mutation.
func (m *RoomMutation) AddedNumberBeds() (r int, exists bool) {
	v := m.addnumberBeds
	if v == nil {
		return
	}
	return *v, true
}

// ResetNumberBeds resets all changes to the "numberBeds" field.
func (m *RoomMutation) ResetNumberBeds() {
	m.numberBeds = nil
	m.addnumberBeds = nil
}

// SetNumberPatients sets the "numberPatients" field.
func (m *RoomMutation) SetNumberPatients(i int) {
	m.numberPatients = &i
	m.addnumberPatients = nil
}

// NumberPatients returns the value of the "numberPatients" field in the mutation.
func (m *RoomMutation) NumberPatients() (r int, exists bool) {
	v := m.numberPatients
	if v == nil {
		return
	}
	return *v, true
}

// OldNumberPatients returns the old "numberPatients" field's value of the Room entity.
// If the Room object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoomMutation) OldNumberPatients(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNumberPatients is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNumberPatients requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNumberPatients: %w", err)
	}
	return oldValue.NumberPatients, nil
}

// AddNumberPatients adds i to the "numberPatients" field.
func (m *RoomMutation) AddNumberPatients(i int) {
	if m.addnumberPatients != nil {
		*m.addnumberPatients += i
	} else {
		m.addnumberPatients = &i
	}
}

// AddedNumberPatients returns the value that was added to the "numberPatients" field in this mutation.
func (m *RoomMutation) AddedNumberPatients() (r int, exists bool) {
	v := m.addnumberPatients
	if v == nil {
		return
	}
	return *v, true
}

// ResetNumberPatients resets all changes to the "numberPatients" field.
func (m *RoomMutation) ResetNumberPatients() {
	m.numberPatients = nil
	m.addnumberPatients = nil
}

// SetTypeRoom sets the "typeRoom" field.
func (m *RoomMutation) SetTypeRoom(s string) {
	m.typeRoom = &s
}

// TypeRoom returns the value of the "typeRoom" field in the mutation.
func (m *RoomMutation) TypeRoom() (r string, exists bool) {
	v := m.typeRoom
	if v == nil {
		return
	}
	return *v, true
}

// OldTypeRoom returns the old "typeRoom" field's value of the Room entity.
// If the Room object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoomMutation) OldTypeRoom(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTypeRoom is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTypeRoom requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTypeRoom: %w", err)
	}
	return oldValue.TypeRoom, nil
}

// ResetTypeRoom resets all changes to the "typeRoom" field.
func (m *RoomMutation) ResetTypeRoom() {
	m.typeRoom = nil
}

// AddContainIDs adds the "contains" edge to the Patient entity by ids.
func (m *RoomMutation) AddContainIDs(ids ...int) {
	if m.contains == nil {
		m.contains = make(map[int]struct{})
	}
	for i := range ids {
		m.contains[ids[i]] = struct{}{}
	}
}

// ClearContains clears the "contains" edge to the Patient entity.
func (m *RoomMutation) ClearContains() {
	m.clearedcontains = true
}

// ContainsCleared reports if the "contains" edge to the Patient entity was cleared.
func (m *RoomMutation) ContainsCleared() bool {
	return m.clearedcontains
}

// RemoveContainIDs removes the "contains" edge to the Patient entity by IDs.
func (m *RoomMutation) RemoveContainIDs(ids ...int) {
	if m.removedcontains == nil {
		m.removedcontains = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.contains, ids[i])
		m.removedcontains[ids[i]] = struct{}{}
	}
}

// RemovedContains returns the removed IDs of the "contains" edge to the Patient entity.
func (m *RoomMutation) RemovedContainsIDs() (ids []int) {
	for id := range m.removedcontains {
		ids = append(ids, id)
	}
	return
}

// ContainsIDs returns the "contains" edge IDs in the mutation.
func (m *RoomMutation) ContainsIDs() (ids []int) {
	for id := range m.contains {
		ids = append(ids, id)
	}
	return
}

// ResetContains resets all changes to the "contains" edge.
func (m *RoomMutation) ResetContains() {
	m.contains = nil
	m.clearedcontains = false
	m.removedcontains = nil
}

// Where appends a list predicates to the RoomMutation builder.
func (m *RoomMutation) Where(ps ...predicate.Room) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RoomMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RoomMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Room, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RoomMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RoomMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Room).
func (m *RoomMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RoomMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.number != nil {
		fields = append(fields, room.FieldNumber)
	}
	if m.floor != nil {
		fields = append(fields, room.FieldFloor)
	}
	if m.numberBeds != nil {
		fields = append(fields, room.FieldNumberBeds)
	}
	if m.numberPatients != nil {
		fields = append(fields, room.FieldNumberPatients)
	}
	if m.typeRoom != nil {
		fields = append(fields, room.FieldTypeRoom)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RoomMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case room.FieldNumber:
		return m.Number()
	case room.FieldFloor:
		return m.Floor()
	case room.FieldNumberBeds:
		return m.NumberBeds()
	case room.FieldNumberPatients:
		return m.NumberPatients()
	case room.FieldTypeRoom:
		return m.TypeRoom()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RoomMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case room.FieldNumber:
		return m.OldNumber(ctx)
	case room.FieldFloor:
		return m.OldFloor(ctx)
	case room.FieldNumberBeds:
		return m.OldNumberBeds(ctx)
	case room.FieldNumberPatients:
		return m.OldNumberPatients(ctx)
	case room.FieldTypeRoom:
		return m.OldTypeRoom(ctx)
	}
	return nil, fmt.Errorf("unknown Room field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RoomMutation) SetField(name string, value ent.Value) error {
	switch name {
	case room.FieldNumber:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNumber(v)
		return nil
	case room.FieldFloor:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFloor(v)
		return nil
	case room.FieldNumberBeds:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNumberBeds(v)
		return nil
	case room.FieldNumberPatients:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNumberPatients(v)
		return nil
	case room.FieldTypeRoom:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTypeRoom(v)
		return nil
	}
	return fmt.Errorf("unknown Room field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RoomMutation) AddedFields() []string {
	var fields []string
	if m.addnumber != nil {
		fields = append(fields, room.FieldNumber)
	}
	if m.addfloor != nil {
		fields = append(fields, room.FieldFloor)
	}
	if m.addnumberBeds != nil {
		fields = append(fields, room.FieldNumberBeds)
	}
	if m.addnumberPatients != nil {
		fields = append(fields, room.FieldNumberPatients)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RoomMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case room.FieldNumber:
		return m.AddedNumber()
	case room.FieldFloor:
		return m.AddedFloor()
	case room.FieldNumberBeds:
		return m.AddedNumberBeds()
	case room.FieldNumberPatients:
		return m.AddedNumberPatients()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RoomMutation) AddField(name string, value ent.Value) error {
	switch name {
	case room.FieldNumber:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddNumber(v)
		return nil
	case room.FieldFloor:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFloor(v)
		return nil
	case room.FieldNumberBeds:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddNumberBeds(v)
		return nil
	case room.FieldNumberPatients:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddNumberPatients(v)
		return nil
	}
	return fmt.Errorf("unknown Room numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RoomMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RoomMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RoomMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Room nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RoomMutation) ResetField(name string) error {
	switch name {
	case room.FieldNumber:
		m.ResetNumber()
		return nil
	case room.FieldFloor:
		m.ResetFloor()
		return nil
	case room.FieldNumberBeds:
		m.ResetNumberBeds()
		return nil
	case room.FieldNumberPatients:
		m.ResetNumberPatients()
		return nil
	case room.FieldTypeRoom:
		m.ResetTypeRoom()
		return nil
	}
	return fmt.Errorf("unknown Room field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RoomMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.contains != nil {
		edges = append(edges, room.EdgeContains)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RoomMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case room.EdgeContains:
		ids := make([]ent.Value, 0, len(m.contains))
		for id := range m.contains {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RoomMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedcontains != nil {
		edges = append(edges, room.EdgeContains)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RoomMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case room.EdgeContains:
		ids := make([]ent.Value, 0, len(m.removedcontains))
		for id := range m.removedcontains {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RoomMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedcontains {
		edges = append(edges, room.EdgeContains)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RoomMutation) EdgeCleared(name string) bool {
	switch name {
	case room.EdgeContains:
		return m.clearedcontains
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RoomMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Room unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RoomMutation) ResetEdge(name string) error {
	switch name {
	case room.EdgeContains:
		m.ResetContains()
		return nil
	}
	return fmt.Errorf("unknown Room edge %s", name)
}
